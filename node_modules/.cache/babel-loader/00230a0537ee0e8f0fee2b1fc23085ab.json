{"ast":null,"code":"var _jsxFileName = \"C:\\\\hometaskwix\\\\minesweeper\\\\src\\\\components\\\\gameBody.js\";\nimport React from 'react';\nimport logo from '../images/logo192.png';\nimport '../App.css';\nimport { Col, Row, Grid } from 'react-flexbox-grid';\n\nclass GameBody extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      height: 10,\n      width: 10,\n      mines: 10,\n      flags: {\n        good: 0,\n        bad: 0\n      },\n      displayData: \"loading\",\n      dataTable: []\n    };\n    this.newGame = this.newGame.bind(this);\n    this.updateGameSettings = this.updateGameSettings.bind(this);\n    this.createBoxesTable = this.createBoxesTable.bind(this);\n    this.createDataTable = this.createDataTable.bind(this);\n    this.setMines = this.setMines.bind(this);\n    this.applyAround = this.applyAround.bind(this);\n    this.increaseValue = this.increaseValue.bind(this);\n    this.onClick = this.onClick.bind(this);\n    this.fixFlags = this.fixFlags.bind(this);\n    this.formatBoxesTable = this.formatBoxesTable.bind(this); //this.boxesTable = this.boxesTable.bind(this);\n  }\n\n  newGame() {\n    console.log(\"new Game\");\n    this.updateGameSettings();\n    this.dataTable = this.createDataTable();\n    this.setMines();\n    console.log(this.dataTable);\n    this.setState({\n      dataTable: this.dataTable\n    }); //this.boxesTable = this.createBoxesTable();\n    // return (\n    //     <div className=\"Mine-grid\">\n    //         {this.formatBoxesTable()}\n    //     </div>\n    // )\n  }\n\n  updateGameSettings() {} // to get the new game numbers from the user and set themto the state;\n\n\n  createDataTable() {\n    console.log(\"create data State\");\n    var dataTable = Array.from({\n      length: this.state.width\n    }, () => Array.from({\n      length: this.state.height\n    }, () => ({\n      value: 0,\n      isMine: false,\n      revealed: false\n    })));\n    return dataTable;\n  }\n\n  setMines() {\n    console.log(\"set Mines\");\n\n    for (let mineCount = 0; mineCount < this.state.mines; mineCount++) {\n      let x = Math.floor(Math.random() * (this.state.width - 1));\n      let y = Math.floor(Math.random() * (this.state.height - 1)); //if(!this.boxesTable[x][y].checkIsMine())\n\n      if (!this.dataTable[x][y].isMine) {\n        //this.boxesTable[x][y].setMine()\n        this.dataTable[x][y].isMine = true;\n        this.applyAround({\n          x,\n          y\n        }, this.increaseValue);\n      } else {\n        mineCount--;\n      }\n    }\n\n    console.log(this.dataTable);\n  }\n\n  createBoxesTable() {\n    var boxesTable = this.dataTable.map((cols, w) => {\n      //var boxes2 = cols.map((box, h) => (new MineBox({id: w.toString() + \",\" + h.toString(), click: this.onClick, isMine:box.isMine, value:box.value})))\n      //var boxes = cols.map((box, h) => (<MineBox key={w.toString() + \",\" + h.toString()} id={w.toString() + \",\" + h.toString()} click={this.onClick} isMine={box.isMine} value={box.value}></MineBox>))\n      var boxes2 = cols.map((box, h) => React.createElement(MineBox, {\n        id: w.toString() + \",\" + h.toString(),\n        click: this.onClick,\n        isMine: box.isMine,\n        value: box.value,\n        revealed: false\n      }));\n      return boxes2;\n    });\n    console.log(boxesTable);\n    return boxesTable;\n  }\n\n  formatBoxesTable() {\n    console.log(this.state.dataTable);\n\n    if (this.state.dataTable.length == 0) {\n      return \"loading\";\n    }\n\n    let rows = [];\n\n    for (let height = 0; height < this.state.height; height++) {\n      let cells = [];\n\n      for (let width = 0; width < this.state.width; width++) {\n        let elem = /*#__PURE__*/React.createElement(Col, {\n          key: width.toString() + \",\" + height.toString(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 28\n          }\n        }, /*#__PURE__*/React.createElement(MineBox, {\n          id: width.toString() + \",\" + height.toString(),\n          click: this.onClick,\n          isMine: this.state.dataTable[width][height].isMine,\n          value: this.state.dataTable[width][height].value,\n          revealed: this.state.dataTable[width][height].revealed,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 21\n          }\n        }));\n        cells.push(elem);\n      }\n\n      let newRow = React.createElement(Row, {\n        className: \"Mine-row\"\n      }, cells);\n      rows.push(newRow);\n    }\n\n    let newTable = React.createElement(Grid, {\n      className: \"Mine-grid\"\n    }, rows);\n    return newTable;\n  }\n\n  applyAround(point, toApplyFunc) {\n    console.log(\"apply Around\");\n    let height = this.state.height;\n    let width = this.state.width;\n\n    function checkAndApply(point) {\n      // check and apply\n      console.log(\"check and apply\");\n\n      if (point.x >= 0 && point.y >= 0 && point.x < width && point.y < height) {\n        toApplyFunc(point);\n      }\n    }\n\n    let x = point.x;\n    let y = point.y; // left side          \n\n    checkAndApply({\n      x: x - 1,\n      y\n    }); // <-\n\n    checkAndApply({\n      x: x - 1,\n      y: y - 1\n    }); //<-^\n\n    checkAndApply({\n      x: x - 1,\n      y: y + 1\n    }); //<-v\n    // right side\n\n    checkAndApply({\n      x: x + 1,\n      y\n    }); // ->\n\n    checkAndApply({\n      x: x + 1,\n      y: y - 1\n    }); // ->^\n\n    checkAndApply({\n      x: x + 1,\n      y: y + 1\n    }); // -> v\n    // up and down\n\n    checkAndApply({\n      x,\n      y: y - 1\n    }); // ^\n\n    checkAndApply({\n      x,\n      y: y + 1\n    }); // V\n  }\n\n  increaseValue(point) {\n    console.log(\"increase Value\");\n    this.dataTable[point.x][point.y].value++;\n  }\n\n  onClick(shift, box) {\n    console.log(\"on click\");\n\n    if (shift) {\n      this.fixFlags(box);\n    } else {\n      if (box.isMine) {\n        this.gameOver();\n      }\n\n      let id = this.convertId(box.id);\n      this.reveal(id);\n    }\n  }\n\n  fixFlags(box) {}\n\n  reveal(id) {\n    let {\n      x,\n      y\n    } = id; //this.boxesTable[x][y].type.prototype.reveal();\n\n    console.log(this.boxesTable[x][y]);\n    this.boxesTable[x][y].props.revealed = true;\n    this.boxesTable[x][y].render();\n    console.log(this.boxesTable[x][y]); //if (this.boxesTable[x][y].)\n  }\n\n  convertId(id) {\n    if (typeof id == \"string\") {\n      let [x, y] = id.split(\",\");\n      return {\n        x,\n        y\n      };\n    }\n\n    return id;\n  }\n\n  // to fix if on opposite case arises\n  gameOver() {}\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.newGame,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 13\n      }\n    }, \"new game\"), this.formatBoxesTable());\n  }\n\n}\n\nclass MineBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      flagged: false,\n      revealed: false\n    };\n    this.checkIsMine = this.checkIsMine.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.changeFlagState = this.changeFlagState.bind(this); // this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  checkIsMine() {\n    return this.props.isMine;\n  }\n\n  changeFlagState() {\n    let nextFlagState = !this.state.flagged;\n    this.setState(prevState => ({\n      flagged: !prevState.flagged\n    }));\n    return nextFlagState;\n  }\n\n  handleClick(e) {\n    const isShift = e.shiftKey;\n    console.log(e.target);\n    let currFlag = this.state.flagged;\n\n    if (isShift) {\n      currFlag = this.changeFlagState;\n    }\n\n    let boxData = {\n      isMine: this.props.isMine,\n      value: this.props.value,\n      flag: currFlag,\n      id: this.props.id\n    };\n    this.props.click(isShift, boxData);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"img\", {\n      src: logo,\n      className: \"Box-logo\",\n      alt: this.props.value,\n      onClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 11\n      }\n    });\n  }\n\n}\n\nexport default GameBody;","map":{"version":3,"sources":["C:/hometaskwix/minesweeper/src/components/gameBody.js"],"names":["React","logo","Col","Row","Grid","GameBody","Component","constructor","props","state","height","width","mines","flags","good","bad","displayData","dataTable","newGame","bind","updateGameSettings","createBoxesTable","createDataTable","setMines","applyAround","increaseValue","onClick","fixFlags","formatBoxesTable","console","log","setState","Array","from","length","value","isMine","revealed","mineCount","x","Math","floor","random","y","boxesTable","map","cols","w","boxes2","box","h","createElement","MineBox","id","toString","click","rows","cells","elem","push","newRow","className","newTable","point","toApplyFunc","checkAndApply","shift","gameOver","convertId","reveal","render","split","flagged","checkIsMine","handleClick","changeFlagState","nextFlagState","prevState","e","isShift","shiftKey","target","currFlag","boxData","flag"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport logo from '../images/logo192.png';\r\nimport '../App.css';\r\nimport { Col, Row, Grid } from 'react-flexbox-grid'\r\n\r\nclass GameBody extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            height: 10, \r\n            width: 10, \r\n            mines: 10, \r\n            flags: {good: 0, bad: 0}, \r\n            displayData:\"loading\", \r\n            dataTable: []};\r\n\r\n        this.newGame = this.newGame.bind(this);\r\n        this.updateGameSettings = this.updateGameSettings.bind(this);\r\n        this.createBoxesTable = this.createBoxesTable.bind(this);\r\n        this.createDataTable = this.createDataTable.bind(this);\r\n        this.setMines = this.setMines.bind(this);\r\n        this.applyAround = this.applyAround.bind(this);\r\n        this.increaseValue = this.increaseValue.bind(this);\r\n        this.onClick = this.onClick.bind(this);\r\n        this.fixFlags = this.fixFlags.bind(this);\r\n        this.formatBoxesTable = this.formatBoxesTable.bind(this);\r\n        //this.boxesTable = this.boxesTable.bind(this);\r\n    }\r\n\r\n    newGame() {\r\n        console.log(\"new Game\");\r\n        this.updateGameSettings();\r\n        this.dataTable = this.createDataTable()\r\n        this.setMines();\r\n        console.log(this.dataTable);\r\n        this.setState({dataTable: this.dataTable});\r\n        //this.boxesTable = this.createBoxesTable();\r\n\r\n        // return (\r\n        //     <div className=\"Mine-grid\">\r\n        //         {this.formatBoxesTable()}\r\n        //     </div>\r\n        // )\r\n                    \r\n    }\r\n    \r\n\r\n    updateGameSettings() {} // to get the new game numbers from the user and set themto the state;\r\n\r\n    createDataTable() {\r\n        console.log(\"create data State\");\r\n\r\n        var dataTable = Array.from({length: this.state.width}, () => Array.from({length: this.state.height}, () => ({value: 0, isMine: false, revealed:false})))\r\n\r\n        return dataTable;\r\n    }\r\n\r\n\r\n    setMines() {\r\n        console.log(\"set Mines\");\r\n        for(let mineCount = 0; mineCount < this.state.mines; mineCount++)\r\n        {\r\n            let x = Math.floor(Math.random() * (this.state.width - 1));\r\n            let y = Math.floor(Math.random() * (this.state.height - 1));\r\n            \r\n            //if(!this.boxesTable[x][y].checkIsMine())\r\n            if(!this.dataTable[x][y].isMine)            \r\n            {\r\n                //this.boxesTable[x][y].setMine()\r\n                this.dataTable[x][y].isMine = true;\r\n                \r\n                this.applyAround({x,y},this.increaseValue)\r\n            }\r\n            else\r\n            {\r\n                mineCount--\r\n            }\r\n        }\r\n\r\n        console.log(this.dataTable);\r\n\r\n    }\r\n\r\n    createBoxesTable() {\r\n        var boxesTable = this.dataTable.map((cols, w) => {\r\n            //var boxes2 = cols.map((box, h) => (new MineBox({id: w.toString() + \",\" + h.toString(), click: this.onClick, isMine:box.isMine, value:box.value})))\r\n            //var boxes = cols.map((box, h) => (<MineBox key={w.toString() + \",\" + h.toString()} id={w.toString() + \",\" + h.toString()} click={this.onClick} isMine={box.isMine} value={box.value}></MineBox>))\r\n            var boxes2 = cols.map((box, h) => (React.createElement(MineBox,{id: w.toString() + \",\" + h.toString(), click: this.onClick, isMine:box.isMine, value:box.value, revealed:false})))\r\n            return boxes2;\r\n        }) \r\n        console.log(boxesTable);\r\n        return boxesTable;\r\n    }\r\n\r\n    formatBoxesTable() {\r\n        console.log(this.state.dataTable);\r\n        if (this.state.dataTable.length == 0)\r\n        {\r\n            return \"loading\"\r\n        }\r\n\r\n\r\n        let rows = [];\r\n        for (let height = 0; height < this.state.height; height++) {\r\n            let cells = [];\r\n            for (let width = 0; width < this.state.width; width++) {\r\n\r\n                let elem = <Col key={width.toString() + \",\" + height.toString()}>\r\n                    <MineBox id={width.toString() + \",\" + height.toString()} \r\n                             click={this.onClick} \r\n                             isMine={this.state.dataTable[width][height].isMine} \r\n                             value={this.state.dataTable[width][height].value}\r\n                             revealed={this.state.dataTable[width][height].revealed}\r\n                             ></MineBox>\r\n                </Col> ;\r\n                cells.push(elem);\r\n            }\r\n            let newRow = React.createElement(\r\n                Row,\r\n                {className: \"Mine-row\"},\r\n                cells\r\n            )\r\n            rows.push(newRow)\r\n        }\r\n\r\n        let newTable = React.createElement(\r\n            Grid,\r\n            {className: \"Mine-grid\"},\r\n            rows\r\n        )\r\n\r\n        return newTable;\r\n    }\r\n\r\n    applyAround(point,toApplyFunc)\r\n    {        \r\n        console.log(\"apply Around\");\r\n        \r\n        let height = this.state.height;\r\n        let width = this.state.width;\r\n        function checkAndApply(point){// check and apply\r\n            console.log(\"check and apply\");\r\n            \r\n            if(point.x >= 0 && point.y >= 0 && point.x < width && point.y < height) \r\n            {\r\n                toApplyFunc(point)\r\n            }\r\n        }\r\n\r\n        let x = point.x;\r\n        let y = point.y;\r\n\r\n        // left side          \r\n        checkAndApply({x: x - 1, y});// <-\r\n        checkAndApply({x: x - 1, y: y - 1});//<-^\r\n        checkAndApply({x: x - 1, y: y + 1})//<-v\r\n          \r\n        // right side\r\n        checkAndApply({x: x + 1, y});// ->\r\n        checkAndApply({x: x + 1, y: y -1});// ->^\r\n        checkAndApply({x: x + 1, y: y + 1})// -> v\r\n          \r\n        // up and down\r\n        checkAndApply({x, y: y - 1});// ^\r\n        checkAndApply({x, y: y + 1})// V\r\n    }\r\n\r\n    increaseValue (point) {\r\n        console.log(\"increase Value\");\r\n        this.dataTable[point.x][point.y].value++;\r\n    }\r\n\r\n    onClick (shift, box) {\r\n        console.log(\"on click\");\r\n        if (shift)\r\n        {\r\n            this.fixFlags(box)\r\n        }\r\n        else\r\n        {\r\n            if (box.isMine)\r\n            {\r\n                this.gameOver()\r\n            }\r\n\r\n            let id = this.convertId(box.id)\r\n            this.reveal(id)\r\n        }\r\n        \r\n\r\n    }\r\n\r\n    fixFlags(box){}\r\n\r\n    reveal(id){\r\n        let {x,y} = id;\r\n        //this.boxesTable[x][y].type.prototype.reveal();\r\n\r\n        console.log(this.boxesTable[x][y]);\r\n        this.boxesTable[x][y].props.revealed = true;\r\n        this.boxesTable[x][y].render();\r\n        console.log(this.boxesTable[x][y]);\r\n\r\n        //if (this.boxesTable[x][y].)\r\n\r\n    }\r\n\r\n    convertId(id) { \r\n        if (typeof id == \"string\")\r\n        {\r\n            let [x,y]= id.split(\",\");\r\n            return {x,y};\r\n        }\r\n        return id;\r\n    };// to fix if on opposite case arises\r\n\r\n    gameOver(){}\r\n\r\n    render() {\r\n        \r\n        return (\r\n        <div>\r\n            <button onClick={this.newGame}>new game</button>\r\n            {this.formatBoxesTable()}\r\n        </div>\r\n        );\r\n    };\r\n}\r\n\r\n\r\nclass MineBox extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { flagged: false , revealed: false};\r\n        this.checkIsMine = this.checkIsMine.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.changeFlagState = this.changeFlagState.bind(this);\r\n        \r\n        // this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    checkIsMine() {\r\n        return this.props.isMine;\r\n    }\r\n   \r\n\r\n    changeFlagState() {\r\n        let nextFlagState = !this.state.flagged;\r\n        this.setState((prevState)=> ({flagged: !prevState.flagged}));\r\n        return nextFlagState;\r\n    }\r\n\r\n    handleClick (e) {\r\n        const isShift = e.shiftKey;\r\n        console.log(e.target);\r\n        let currFlag = this.state.flagged;\r\n        if (isShift)\r\n        {\r\n            currFlag = this.changeFlagState;\r\n        }\r\n\r\n        let boxData = {\r\n            isMine: this.props.isMine,\r\n            value: this.props.value,\r\n            flag: currFlag,\r\n            id: this.props.id\r\n        }\r\n\r\n        this.props.click(isShift, boxData);\r\n\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        \r\n          <img src={logo} className=\"Box-logo\" alt={this.props.value} onClick={this.handleClick}/>\r\n        \r\n      );\r\n    }\r\n}\r\nexport default GameBody;\r\n"]},"metadata":{},"sourceType":"module"}