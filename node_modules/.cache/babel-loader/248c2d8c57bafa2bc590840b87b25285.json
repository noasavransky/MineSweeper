{"ast":null,"code":"var _jsxFileName = \"C:\\\\hometaskwix\\\\minesweeper\\\\src\\\\components\\\\gameBody.js\";\nimport React from 'react';\nimport logo from '../images/logo192.png';\nimport '../App.css';\nimport { Col, Row, Grid } from 'react-flexbox-grid';\n\nclass GameBody extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      height: 10,\n      width: 10,\n      mines: 10,\n      flags: {\n        good: 0,\n        bad: 0\n      }\n    };\n    this.newGame = this.newGame.bind(this);\n    this.updateGameSettings = this.updateGameSettings.bind(this);\n    this.createBoxesTable = this.createBoxesTable.bind(this);\n    this.createDataTable = this.createDataTable.bind(this);\n    this.setMines = this.setMines.bind(this);\n    this.applyAround = this.applyAround.bind(this);\n    this.increaseValue = this.increaseValue.bind(this);\n    this.onClick = this.onClick.bind(this);\n    this.fixFlags = this.fixFlags.bind(this); //this.boxesTable = this.boxesTable.bind(this);\n  }\n\n  newGame() {\n    console.log(\"new Game\");\n    this.updateGameSettings();\n    this.dataTable = this.createDataTable();\n    this.setMines();\n    this.boxesTable = this.createBoxesTable();\n    var id = 0;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Mine-grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }\n    }, this.boxesTable.map((cols, w) => /*#__PURE__*/React.createElement(Row, {\n      key: id++,\n      className: \"Mine-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }\n    }, cols.map((box, h) => /*#__PURE__*/React.createElement(Col, {\n      key: id++,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }\n    }, box.render())))));\n  }\n\n  updateGameSettings() {} // to get the new game numbers from the user and set themto the state;\n\n\n  createDataTable() {\n    console.log(\"create data State\");\n    var dataTable = Array.from({\n      length: this.state.width\n    }, () => Array.from({\n      length: this.state.height\n    }, () => ({\n      value: 0,\n      isMine: false\n    }))); // var boxesTable = [];\n    // boxesTable.length = this.state.width;\n    // var column = [];\n    // column.length = this.state.height;\n    // //column.fill(new MineBox({click: this.onClick, value: 0, isMine:false}));\n    // column.fill(Object.create({value: 0, isMine:false}));\n    // boxesTable.fill(column);\n    //---------------------------------------------------------\n    // for (let w = 0; w < this.state.width; w++) \n    // {\n    //     let column = []\n    //     column.fill(new MineBox(), 0, height-1);\n    //     for (let h = 0; h < this.state.height; h++) \n    //     {\n    //         let id = w * this.state.width + h;\n    //         childern.push(new MineBox());\n    //     }          \n    //     this.boxesTable.push(column);\n\n    return dataTable;\n  }\n\n  setMines() {\n    console.log(\"set Mines\");\n\n    for (let mineCount = 0; mineCount < this.state.mines; mineCount++) {\n      let x = Math.floor(Math.random() * (this.state.width - 1));\n      let y = Math.floor(Math.random() * (this.state.height - 1)); //if(!this.boxesTable[x][y].checkIsMine())\n\n      if (!this.dataTable[x][y].isMine) {\n        //this.boxesTable[x][y].setMine()\n        this.dataTable[x][y].isMine = true;\n        this.applyAround({\n          x,\n          y\n        }, this.increaseValue);\n      } else {\n        mineCount--;\n      }\n    }\n  }\n\n  createBoxesTable() {\n    var boxesTable = this.dataTable.map((cols, w) => {\n      var boxes = cols.map((box, h) => new MineBox({\n        id: w.toString() + \",\" + h.toString(),\n        click: this.onClick,\n        isMine: box.isMine,\n        value: box.value\n      })); //var boxes = cols.map((box, h) => (<MineBox id={w.toString() + \",\" + h.toString()} click={this.onClick} isMine={box.isMine} value={box.value}></MineBox>))\n\n      return boxes;\n    });\n    console.log(boxesTable);\n    return boxesTable;\n  }\n\n  applyAround(point, toApplyFunc) {\n    console.log(\"apply Around\");\n    let height = this.state.height;\n    let width = this.state.width;\n\n    function checkAndApply(point) {\n      // check and apply\n      console.log(\"check and apply\");\n\n      if (point.x >= 0 && point.y >= 0 && point.x < width && point.y < height) {\n        toApplyFunc(point);\n      }\n    }\n\n    let x = point.x;\n    let y = point.y; // left side          \n\n    checkAndApply({\n      x: x - 1,\n      y\n    }); // <-\n\n    checkAndApply({\n      x: x - 1,\n      y: y - 1\n    }); //<-^\n\n    checkAndApply({\n      x: x - 1,\n      y: y + 1\n    }); //<-v\n    // right side\n\n    checkAndApply({\n      x: x + 1,\n      y\n    }); // ->\n\n    checkAndApply({\n      x: x + 1,\n      y: y - 1\n    }); // ->^\n\n    checkAndApply({\n      x: x + 1,\n      y: y + 1\n    }); // -> v\n    // up and down\n\n    checkAndApply({\n      x,\n      y: y - 1\n    }); // ^\n\n    checkAndApply({\n      x,\n      y: y + 1\n    }); // V\n  }\n\n  increaseValue(point) {\n    console.log(\"increase Value\");\n    this.dataTable[point.x][point.y].value++;\n  }\n\n  onClick(shift, box) {\n    console.log(\"on click\");\n\n    if (shift) {\n      this.fixFlags(box);\n    } else {\n      if (box.isMine) {\n        this.gameOver();\n      }\n\n      let id = this.convertId(box.id);\n      this.reveal(id);\n    }\n  }\n\n  fixFlags(box) {}\n\n  reveal(id) {\n    let {\n      x,\n      y\n    } = id;\n    this.boxesTable[x][y].reveal();\n    console.log(this.boxesTable[x][y]); //if (this.boxesTable[x][y].)\n  }\n\n  convertId(id) {\n    if (typeof id == \"string\") {\n      let [x, y] = id.split(\",\");\n      return {\n        x,\n        y\n      };\n    }\n\n    return id;\n  }\n\n  // to fix if on opposite case arises\n  gameOver() {}\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }\n    }, this.newGame());\n  }\n\n}\n\nclass MineBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      flagged: false,\n      revealed: false\n    };\n    this.checkIsMine = this.checkIsMine.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.changeFlagState = this.changeFlagState.bind(this);\n    this.reveal = this.reveal.bind(this); // this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  checkIsMine() {\n    return this.props.isMine;\n  }\n\n  changeFlagState() {\n    let nextFlagState = !this.state.flagged;\n    this.setState(prevState => ({\n      flagged: !prevState.flagged\n    }));\n    return nextFlagState;\n  }\n\n  reveal() {\n    this.setState({\n      revealed: true\n    });\n  }\n\n  handleClick(e) {\n    const isShift = e.shiftKey;\n    console.log(e.target);\n    let currFlag = this.state.flagged;\n\n    if (isShift) {\n      currFlag = this.changeFlagState;\n    }\n\n    let boxData = {\n      isMine: this.props.isMine,\n      value: this.props.value,\n      flag: currFlag,\n      id: this.props.id\n    };\n    this.props.click(isShift, boxData);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"img\", {\n      src: logo,\n      className: \"Box-logo\",\n      alt: this.props.value,\n      onClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 11\n      }\n    });\n  }\n\n}\n\nexport default GameBody;","map":{"version":3,"sources":["C:/hometaskwix/minesweeper/src/components/gameBody.js"],"names":["React","logo","Col","Row","Grid","GameBody","Component","constructor","props","state","height","width","mines","flags","good","bad","newGame","bind","updateGameSettings","createBoxesTable","createDataTable","setMines","applyAround","increaseValue","onClick","fixFlags","console","log","dataTable","boxesTable","id","map","cols","w","box","h","render","Array","from","length","value","isMine","mineCount","x","Math","floor","random","y","boxes","MineBox","toString","click","point","toApplyFunc","checkAndApply","shift","gameOver","convertId","reveal","split","flagged","revealed","checkIsMine","handleClick","changeFlagState","nextFlagState","setState","prevState","e","isShift","shiftKey","target","currFlag","boxData","flag"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport logo from '../images/logo192.png';\r\nimport '../App.css';\r\nimport { Col, Row, Grid } from 'react-flexbox-grid'\r\n\r\nclass GameBody extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { height: 10, width: 10, mines: 10, flags: {good: 0, bad: 0} };\r\n\r\n        this.newGame = this.newGame.bind(this);\r\n        this.updateGameSettings = this.updateGameSettings.bind(this);\r\n        this.createBoxesTable = this.createBoxesTable.bind(this);\r\n        this.createDataTable = this.createDataTable.bind(this);\r\n        this.setMines = this.setMines.bind(this);\r\n        this.applyAround = this.applyAround.bind(this);\r\n        this.increaseValue = this.increaseValue.bind(this);\r\n        this.onClick = this.onClick.bind(this);\r\n        this.fixFlags = this.fixFlags.bind(this);\r\n        //this.boxesTable = this.boxesTable.bind(this);\r\n    }\r\n\r\n    newGame() {\r\n        console.log(\"new Game\");\r\n        this.updateGameSettings();\r\n        this.dataTable = this.createDataTable()\r\n        this.setMines();\r\n        this.boxesTable = this.createBoxesTable();\r\n        var id = 0;\r\n        return (\r\n            <div className=\"Mine-grid\">\r\n              {this.boxesTable.map((cols, w) => (\r\n                <Row key={id++} className=\"Mine-row\">\r\n                  {cols.map((box, h) => (\r\n                    <Col key={id++}>\r\n                      {box.render()}\r\n                    </Col>\r\n                  ))}\r\n                </Row>\r\n              ))}\r\n            </div>\r\n        )\r\n                    \r\n    }\r\n\r\n    updateGameSettings() {} // to get the new game numbers from the user and set themto the state;\r\n\r\n    createDataTable() {\r\n        console.log(\"create data State\");\r\n\r\n        var dataTable = Array.from({length: this.state.width}, () => Array.from({length: this.state.height}, () => ({value: 0, isMine: false})))\r\n        // var boxesTable = [];\r\n        // boxesTable.length = this.state.width;\r\n\r\n        // var column = [];\r\n        // column.length = this.state.height;\r\n        // //column.fill(new MineBox({click: this.onClick, value: 0, isMine:false}));\r\n        // column.fill(Object.create({value: 0, isMine:false}));\r\n        // boxesTable.fill(column);\r\n        //---------------------------------------------------------\r\n        // for (let w = 0; w < this.state.width; w++) \r\n        // {\r\n        //     let column = []\r\n\r\n        //     column.fill(new MineBox(), 0, height-1);\r\n\r\n        //     for (let h = 0; h < this.state.height; h++) \r\n        //     {\r\n        //         let id = w * this.state.width + h;\r\n        //         childern.push(new MineBox());\r\n        //     }          \r\n\r\n        //     this.boxesTable.push(column);\r\n\r\n        return dataTable;\r\n    }\r\n\r\n\r\n    setMines() {\r\n        console.log(\"set Mines\");\r\n        for(let mineCount = 0; mineCount < this.state.mines; mineCount++)\r\n        {\r\n            let x = Math.floor(Math.random() * (this.state.width - 1));\r\n            let y = Math.floor(Math.random() * (this.state.height - 1));\r\n            \r\n            //if(!this.boxesTable[x][y].checkIsMine())\r\n            if(!this.dataTable[x][y].isMine)            \r\n            {\r\n                //this.boxesTable[x][y].setMine()\r\n                this.dataTable[x][y].isMine = true;\r\n                \r\n                this.applyAround({x,y},this.increaseValue)\r\n            }\r\n            else\r\n            {\r\n                mineCount--\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    createBoxesTable() {\r\n        var boxesTable = this.dataTable.map((cols, w) => {\r\n            var boxes = cols.map((box, h) => (new MineBox({id: w.toString() + \",\" + h.toString(), click: this.onClick, isMine:box.isMine, value:box.value})))\r\n            //var boxes = cols.map((box, h) => (<MineBox id={w.toString() + \",\" + h.toString()} click={this.onClick} isMine={box.isMine} value={box.value}></MineBox>))\r\n            return boxes;\r\n        }) \r\n        console.log(boxesTable);\r\n        return boxesTable;\r\n    }\r\n\r\n    applyAround(point,toApplyFunc)\r\n    {        \r\n        console.log(\"apply Around\");\r\n        \r\n        let height = this.state.height;\r\n        let width = this.state.width;\r\n        function checkAndApply(point){// check and apply\r\n            console.log(\"check and apply\");\r\n            \r\n            if(point.x >= 0 && point.y >= 0 && point.x < width && point.y < height) \r\n            {\r\n                toApplyFunc(point)\r\n            }\r\n        }\r\n\r\n        let x = point.x;\r\n        let y = point.y;\r\n\r\n        // left side          \r\n        checkAndApply({x: x - 1, y});// <-\r\n        checkAndApply({x: x - 1, y: y - 1});//<-^\r\n        checkAndApply({x: x - 1, y: y + 1})//<-v\r\n          \r\n        // right side\r\n        checkAndApply({x: x + 1, y});// ->\r\n        checkAndApply({x: x + 1, y: y -1});// ->^\r\n        checkAndApply({x: x + 1, y: y + 1})// -> v\r\n          \r\n        // up and down\r\n        checkAndApply({x, y: y - 1});// ^\r\n        checkAndApply({x, y: y + 1})// V\r\n    }\r\n\r\n    increaseValue (point) {\r\n        console.log(\"increase Value\");\r\n        this.dataTable[point.x][point.y].value++;\r\n    }\r\n\r\n    onClick (shift, box) {\r\n        console.log(\"on click\");\r\n        if (shift)\r\n        {\r\n            this.fixFlags(box)\r\n        }\r\n        else\r\n        {\r\n            if (box.isMine)\r\n            {\r\n                this.gameOver()\r\n            }\r\n\r\n            let id = this.convertId(box.id)\r\n            this.reveal(id)\r\n        }\r\n        \r\n\r\n    }\r\n\r\n    fixFlags(box){}\r\n\r\n    reveal(id){\r\n        let {x,y} = id;\r\n        this.boxesTable[x][y].reveal();\r\n\r\n        console.log(this.boxesTable[x][y]);\r\n\r\n        //if (this.boxesTable[x][y].)\r\n\r\n    }\r\n\r\n    convertId(id) { \r\n        if (typeof id == \"string\")\r\n        {\r\n            let [x,y]= id.split(\",\");\r\n            return {x,y};\r\n        }\r\n        return id;\r\n    };// to fix if on opposite case arises\r\n\r\n    gameOver(){}\r\n\r\n    render() {\r\n        \r\n        return (\r\n        <div>\r\n            {this.newGame()}\r\n        </div>\r\n        );\r\n    };\r\n}\r\n\r\n\r\nclass MineBox extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { flagged: false , revealed: false};\r\n        this.checkIsMine = this.checkIsMine.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.changeFlagState = this.changeFlagState.bind(this);\r\n        this.reveal = this.reveal.bind(this);\r\n        // this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    checkIsMine() {\r\n        return this.props.isMine;\r\n    }\r\n   \r\n\r\n    changeFlagState() {\r\n        let nextFlagState = !this.state.flagged;\r\n        this.setState((prevState)=> ({flagged: !prevState.flagged}));\r\n        return nextFlagState;\r\n    }\r\n\r\n    reveal() {\r\n        this.setState({revealed:true});\r\n    }\r\n\r\n    handleClick (e) {\r\n        const isShift = e.shiftKey;\r\n        console.log(e.target);\r\n        let currFlag = this.state.flagged;\r\n        if (isShift)\r\n        {\r\n            currFlag = this.changeFlagState;\r\n        }\r\n\r\n        let boxData = {\r\n            isMine: this.props.isMine,\r\n            value: this.props.value,\r\n            flag: currFlag,\r\n            id: this.props.id\r\n        }\r\n\r\n        this.props.click(isShift, boxData);\r\n\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        \r\n          <img src={logo} className=\"Box-logo\" alt={this.props.value} onClick={this.handleClick}/>\r\n        \r\n      );\r\n    }\r\n}\r\nexport default GameBody;\r\n"]},"metadata":{},"sourceType":"module"}