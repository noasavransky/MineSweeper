{"ast":null,"code":"var _jsxFileName = \"C:\\\\hometaskwix\\\\minesweeper\\\\src\\\\components\\\\gameBody.js\";\nimport React from 'react';\nimport logo from '../images/logo192.png';\nimport base from '../images/base.png';\nimport flag from '../images/flag.png';\nimport pic0 from '../images/0.png';\nimport pic1 from '../images/1.png';\nimport pic2 from '../images/2.png';\nimport pic3 from '../images/3.png';\nimport pic4 from '../images/4.png';\nimport pic5 from '../images/5.png';\nimport pic6 from '../images/6.png';\nimport pic7 from '../images/7.png';\nimport pic8 from '../images/8.png';\nimport mine from '../images/mine.png';\nimport genie from '../images/genie.png';\nimport '../App.css';\nimport { Col, Row, Grid } from 'react-flexbox-grid';\nimport GameHeder from './gameHeader.js';\n\nclass GameBody extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      height: 10,\n      width: 10,\n      mines: 10,\n      flags: {\n        good: 0,\n        bad: 0\n      },\n      gameStatus: \"pre\",\n      showAll: false,\n      dataTable: []\n    };\n    this.newGame = this.newGame.bind(this);\n    this.updateGameSettings = this.updateGameSettings.bind(this);\n    this.createDataTable = this.createDataTable.bind(this);\n    this.setMines = this.setMines.bind(this);\n    this.applyAround = this.applyAround.bind(this);\n    this.increaseValue = this.increaseValue.bind(this);\n    this.onClick = this.onClick.bind(this);\n    this.fixFlags = this.fixFlags.bind(this);\n    this.formatBoxesTable = this.formatBoxesTable.bind(this);\n    this.reveal = this.reveal.bind(this);\n    this.revealAll = this.revealAll.bind(this);\n    this.superman = this.superman.bind(this);\n    this.handleSuperman = this.handleSuperman.bind(this);\n  }\n\n  newGame() {\n    console.log(\"new Game\");\n    this.dataTable = this.createDataTable();\n    this.setMines();\n    console.log(\"new Game data\");\n    console.log(this.dataTable);\n    this.setState({\n      dataTable: this.dataTable,\n      gameStatus: \"ongoing\",\n      showAll: false\n    });\n  }\n\n  updateGameSettings(newGameData) {\n    console.log(\"update game\");\n    newGameData.gameStatus = \"pre\";\n    newGameData.flags = {\n      good: 0,\n      bad: 0\n    };\n    this.setState(newGameData, this.newGame);\n  }\n\n  createDataTable() {\n    console.log(\"create data State\");\n    var dataTable = Array.from({\n      length: this.state.width\n    }, () => Array.from({\n      length: this.state.height\n    }, () => ({\n      value: 0,\n      isMine: false,\n      revealed: false,\n      flagged: false\n    })));\n    return dataTable;\n  }\n\n  setMines() {\n    console.log(\"set Mines\");\n\n    for (let mineCount = 0; mineCount < this.state.mines; mineCount++) {\n      let x = Math.floor(Math.random() * this.state.width);\n      let y = Math.floor(Math.random() * this.state.height); //if(!this.boxesTable[x][y].checkIsMine())\n\n      if (!this.dataTable[x][y].isMine) {\n        //this.boxesTable[x][y].setMine()\n        this.dataTable[x][y].isMine = true;\n        this.applyAround({\n          x,\n          y\n        }, this.increaseValue);\n      } else {\n        mineCount--;\n      }\n    }\n\n    console.log(this.dataTable);\n  }\n\n  formatBoxesTable() {\n    console.log(this.state.dataTable);\n\n    if (this.state.gameStatus === \"pre\") {\n      return;\n    }\n\n    let rows = [];\n\n    for (let height = 0; height < this.state.height; height++) {\n      let cells = [];\n\n      for (let width = 0; width < this.state.width; width++) {\n        let elem = /*#__PURE__*/React.createElement(Col, {\n          key: width.toString() + \",\" + height.toString(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 28\n          }\n        }, /*#__PURE__*/React.createElement(MineBox, {\n          id: width.toString() + \",\" + height.toString(),\n          click: this.onClick,\n          isMine: this.state.dataTable[width][height].isMine,\n          value: this.state.dataTable[width][height].value,\n          revealed: this.state.dataTable[width][height].revealed,\n          flagged: this.state.dataTable[width][height].flagged,\n          showAll: this.state.showAll,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 21\n          }\n        }));\n        cells.push(elem);\n      }\n\n      let newRow = React.createElement(Row, {\n        className: \"Mine-row\"\n      }, cells);\n      rows.push(newRow);\n    }\n\n    let newTable = React.createElement(Grid, {\n      className: \"Mine-grid\"\n    }, rows);\n    return newTable;\n  }\n\n  applyAround(point, toApplyFunc) {\n    let height = this.state.height;\n    let width = this.state.width;\n\n    function checkAndApply(point) {\n      // check and apply\n      console.log(\"check and apply\");\n      console.log(point);\n\n      if (point.x >= 0 && point.y >= 0 && point.x < width && point.y < height) {\n        toApplyFunc(point);\n      }\n    }\n\n    let {\n      x,\n      y\n    } = point; // left side          \n\n    checkAndApply({\n      x: x - 1,\n      y\n    }); // <-\n\n    checkAndApply({\n      x: x - 1,\n      y: y - 1\n    }); //<-^\n\n    checkAndApply({\n      x: x - 1,\n      y: y + 1\n    }); //<-v\n    // right side\n\n    checkAndApply({\n      x: x + 1,\n      y\n    }); // ->\n\n    checkAndApply({\n      x: x + 1,\n      y: y - 1\n    }); // ->^\n\n    checkAndApply({\n      x: x + 1,\n      y: y + 1\n    }); // -> v\n    // up and down\n\n    checkAndApply({\n      x,\n      y: y - 1\n    }); // ^\n\n    checkAndApply({\n      x,\n      y: y + 1\n    }); // V\n  }\n\n  increaseValue(point) {\n    this.dataTable[point.x][point.y].value++;\n  }\n\n  onClick(shift, box) {\n    console.log(\"on click\");\n\n    if (shift) {\n      this.fixFlags(box);\n    } else {\n      if (box.isMine) {\n        this.gameOver();\n      }\n\n      let id = this.convertId(box.id);\n      this.reveal(id);\n    }\n  }\n\n  fixFlags(box) {\n    let {\n      x,\n      y\n    } = this.convertId(box.id);\n    let currBox = this.state.dataTable[x][y];\n\n    if (this.state.flags.bad + this.state.flags.good == this.state.mines && !currBox.flagged) {\n      alert(\"You'r out of flags\");\n      return;\n    }\n\n    var goodOrBad = currBox.isMine ? \"good\" : \"bad\";\n    var change = currBox.flagged ? -1 : 1;\n    let {\n      flags\n    } = this.state;\n    console.log(flags);\n    flags[goodOrBad] += change;\n    this.setState(flags, () => {\n      if (this.state.flags.good == this.state.mines) {\n        this.setState({\n          gameStatus: \"win\"\n        });\n        this.revealAll(true);\n      }\n    });\n    let tempGrid = this.state.dataTable;\n    tempGrid[x][y].flagged = !tempGrid[x][y].flagged;\n    this.setState({\n      dataTable: tempGrid\n    });\n  }\n\n  reveal(id) {\n    let {\n      x,\n      y\n    } = id; //this.boxesTable[x][y].type.prototype.reveal();\n\n    let tempGrid = this.state.dataTable;\n    console.log(id);\n\n    if (!tempGrid[x][y].flagged && !tempGrid[x][y].revealed) {\n      tempGrid[x][y].revealed = true;\n      console.log(\"revealed:\" + x + \",\" + y);\n      this.setState({\n        dataTable: tempGrid\n      });\n\n      if (tempGrid[x][y].value == 0) {\n        this.applyAround(id, this.reveal);\n      }\n    }\n  }\n\n  convertId(id) {\n    if (typeof id == \"string\") {\n      let [x, y] = id.split(\",\");\n      x = x * 1;\n      y = y * 1;\n      return {\n        x,\n        y\n      };\n    }\n\n    return id;\n  }\n\n  // to fix if on opposite case arises\n  gameOver() {\n    this.revealAll(true);\n    this.setState({\n      gameStatus: \"lose\"\n    });\n  }\n\n  revealAll(toReveal) {\n    this.setState({\n      showAll: toReveal\n    });\n  }\n\n  handleSuperman(event) {\n    this.state.showAll ? this.revealAll(false) : this.revealAll(true);\n  }\n\n  superman() {\n    if (this.state.gameStatus !== \"ongoing\") return;\n    let superman = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 24\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 13\n      }\n    }, \"Do you wish to see the answer? \", /*#__PURE__*/React.createElement(\"img\", {\n      src: genie,\n      className: \"Genie-pic\",\n      alt: \"see the truth!\",\n      onClick: this.handleSuperman,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 48\n      }\n    })));\n    return superman;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(GameHeder, {\n      height: this.state.height,\n      width: this.state.width,\n      mines: this.state.mines,\n      flags: this.state.flags,\n      update: this.updateGameSettings,\n      status: this.state.gameStatus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 13\n      }\n    }), this.state.alert, this.formatBoxesTable(), this.superman());\n  }\n\n}\n\nclass MineBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.checkIsMine = this.checkIsMine.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.picMap = {\n      0: pic0,\n      1: pic1,\n      2: pic2,\n      3: pic3,\n      4: pic4,\n      5: pic5,\n      6: pic6,\n      7: pic7,\n      8: pic8\n    }; // this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  checkIsMine() {\n    return this.props.isMine;\n  }\n\n  handleClick(e) {\n    const isShift = e.shiftKey;\n    console.log(e.target);\n    let boxData = {\n      isMine: this.props.isMine,\n      value: this.props.value,\n      flag: this.props.flagged,\n      id: this.props.id\n    };\n    this.props.click(isShift, boxData);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"img\", {\n      src: this.props.showAll || this.props.revealed ? this.props.isMine ? mine : this.picMap[this.props.value] : this.props.flagged ? flag : base,\n      className: \"Box-logo \",\n      alt: this.props.value,\n      onClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 11\n      }\n    });\n  }\n\n}\n\nexport default GameBody;","map":{"version":3,"sources":["C:/hometaskwix/minesweeper/src/components/gameBody.js"],"names":["React","logo","base","flag","pic0","pic1","pic2","pic3","pic4","pic5","pic6","pic7","pic8","mine","genie","Col","Row","Grid","GameHeder","GameBody","Component","constructor","props","state","height","width","mines","flags","good","bad","gameStatus","showAll","dataTable","newGame","bind","updateGameSettings","createDataTable","setMines","applyAround","increaseValue","onClick","fixFlags","formatBoxesTable","reveal","revealAll","superman","handleSuperman","console","log","setState","newGameData","Array","from","length","value","isMine","revealed","flagged","mineCount","x","Math","floor","random","y","rows","cells","elem","toString","push","newRow","createElement","className","newTable","point","toApplyFunc","checkAndApply","shift","box","gameOver","id","convertId","currBox","alert","goodOrBad","change","tempGrid","split","toReveal","event","render","MineBox","checkIsMine","handleClick","picMap","e","isShift","shiftKey","target","boxData","click"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport logo from '../images/logo192.png';\r\nimport base from '../images/base.png';\r\nimport flag from '../images/flag.png';\r\nimport pic0 from '../images/0.png';\r\nimport pic1 from '../images/1.png';\r\nimport pic2 from '../images/2.png';\r\nimport pic3 from '../images/3.png';\r\nimport pic4 from '../images/4.png';\r\nimport pic5 from '../images/5.png';\r\nimport pic6 from '../images/6.png';\r\nimport pic7 from '../images/7.png';\r\nimport pic8 from '../images/8.png';\r\nimport mine from '../images/mine.png';\r\nimport genie from '../images/genie.png';\r\n\r\nimport '../App.css';\r\nimport { Col, Row, Grid } from 'react-flexbox-grid'\r\nimport GameHeder from './gameHeader.js'\r\n\r\nclass GameBody extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            height: 10, \r\n            width: 10, \r\n            mines: 10, \r\n            flags: {good: 0, bad: 0}, \r\n            gameStatus:\"pre\",\r\n            showAll:false,\r\n            dataTable: []};\r\n\r\n        this.newGame = this.newGame.bind(this);\r\n        this.updateGameSettings = this.updateGameSettings.bind(this);\r\n        this.createDataTable = this.createDataTable.bind(this);\r\n        this.setMines = this.setMines.bind(this);\r\n        this.applyAround = this.applyAround.bind(this);\r\n        this.increaseValue = this.increaseValue.bind(this);\r\n        this.onClick = this.onClick.bind(this);\r\n        this.fixFlags = this.fixFlags.bind(this);\r\n        this.formatBoxesTable = this.formatBoxesTable.bind(this);\r\n        this.reveal = this.reveal.bind(this);\r\n        this.revealAll = this.revealAll.bind(this);\r\n        this.superman = this.superman.bind(this);   \r\n        this.handleSuperman = this.handleSuperman.bind(this);\r\n    }\r\n\r\n    newGame() {\r\n        console.log(\"new Game\");\r\n        this.dataTable = this.createDataTable()\r\n        this.setMines();\r\n        console.log(\"new Game data\");\r\n        console.log(this.dataTable);\r\n        this.setState({dataTable: this.dataTable, gameStatus:\"ongoing\", showAll:false});                    \r\n    }\r\n    \r\n    updateGameSettings(newGameData) {\r\n        console.log(\"update game\")\r\n        newGameData.gameStatus = \"pre\";\r\n        newGameData.flags = {good: 0, bad: 0};\r\n        this.setState(newGameData, this.newGame);        \r\n    } \r\n\r\n    createDataTable() {\r\n        console.log(\"create data State\");\r\n\r\n        var dataTable = Array.from({length: this.state.width}, () => Array.from({length: this.state.height}, () => ({value: 0, isMine: false, revealed:false, flagged:false})))\r\n\r\n        return dataTable;\r\n    }\r\n\r\n    setMines() {\r\n        console.log(\"set Mines\");\r\n        for(let mineCount = 0; mineCount < this.state.mines; mineCount++)\r\n        {\r\n            let x = Math.floor(Math.random() * (this.state.width));\r\n            let y = Math.floor(Math.random() * (this.state.height));\r\n            \r\n            //if(!this.boxesTable[x][y].checkIsMine())\r\n            if(!this.dataTable[x][y].isMine)            \r\n            {\r\n                //this.boxesTable[x][y].setMine()\r\n                this.dataTable[x][y].isMine = true;\r\n                \r\n                this.applyAround({x,y},this.increaseValue)\r\n            }\r\n            else\r\n            {\r\n                mineCount--\r\n            }\r\n        }\r\n\r\n        console.log(this.dataTable);\r\n\r\n    }\r\n\r\n    formatBoxesTable() {\r\n        console.log(this.state.dataTable);\r\n        if (this.state.gameStatus === \"pre\")\r\n        {\r\n            return;\r\n        }\r\n\r\n\r\n        let rows = [];\r\n        for (let height = 0; height < this.state.height; height++) {\r\n            let cells = [];\r\n            for (let width = 0; width < this.state.width; width++) {\r\n\r\n                let elem = <Col key={width.toString() + \",\" + height.toString()}>\r\n                    <MineBox id={width.toString() + \",\" + height.toString()} \r\n                             click={this.onClick} \r\n                             isMine={this.state.dataTable[width][height].isMine} \r\n                             value={this.state.dataTable[width][height].value}\r\n                             revealed={this.state.dataTable[width][height].revealed}\r\n                             flagged={this.state.dataTable[width][height].flagged}\r\n                             showAll={this.state.showAll}\r\n                             ></MineBox>\r\n                </Col> ;\r\n                cells.push(elem);\r\n            }\r\n            let newRow = React.createElement(\r\n                Row,\r\n                {className: \"Mine-row\"},\r\n                cells\r\n            )\r\n            rows.push(newRow)\r\n        }\r\n\r\n        let newTable = React.createElement(\r\n            Grid,\r\n            {className: \"Mine-grid\"},\r\n            rows\r\n        )\r\n\r\n        return newTable;\r\n    }\r\n\r\n    applyAround(point,toApplyFunc)\r\n    {        \r\n        \r\n        let height = this.state.height;\r\n        let width = this.state.width;\r\n        function checkAndApply(point){// check and apply\r\n            console.log(\"check and apply\");\r\n            console.log(point);\r\n            if(point.x >= 0 && point.y >= 0 && point.x < width && point.y < height) \r\n            {\r\n                toApplyFunc(point)\r\n            }\r\n        }\r\n\r\n        let {x,y} = point;\r\n        \r\n        // left side          \r\n        checkAndApply({x: x - 1, y});// <-\r\n        checkAndApply({x: x - 1, y: y - 1});//<-^\r\n        checkAndApply({x: x - 1, y: y + 1})//<-v\r\n          \r\n        // right side\r\n        checkAndApply({x: x + 1, y});// ->\r\n        checkAndApply({x: x + 1, y: y -1});// ->^\r\n        checkAndApply({x: x + 1, y: y + 1})// -> v\r\n          \r\n        // up and down\r\n        checkAndApply({x, y: y - 1});// ^\r\n        checkAndApply({x, y: y + 1})// V\r\n    }\r\n\r\n    increaseValue (point) {\r\n        this.dataTable[point.x][point.y].value++;\r\n    }\r\n\r\n    onClick (shift, box) {\r\n        console.log(\"on click\");\r\n        if (shift)\r\n        {\r\n            this.fixFlags(box)\r\n        }\r\n        else\r\n        {\r\n            if (box.isMine)\r\n            {\r\n                this.gameOver()\r\n            }\r\n\r\n\r\n            let id = this.convertId(box.id)\r\n            this.reveal(id)\r\n        }\r\n        \r\n\r\n    }\r\n\r\n    fixFlags(box){\r\n        \r\n        let {x,y} = this.convertId(box.id);\r\n        let currBox = this.state.dataTable[x][y];\r\n\r\n        if (this.state.flags.bad + this.state.flags.good == this.state.mines && !currBox.flagged)\r\n        {\r\n            alert(\"You'r out of flags\")\r\n            return;\r\n        }\r\n\r\n        var goodOrBad = currBox.isMine ? \"good\" : \"bad\";\r\n        var change = currBox.flagged ? -1 : 1;\r\n        \r\n        \r\n        let {flags} = this.state;\r\n        console.log(flags);\r\n        flags[goodOrBad] += change;\r\n        this.setState(flags, ()=>{\r\n            if (this.state.flags.good == this.state.mines)\r\n            {\r\n                this.setState({gameStatus:\"win\"});\r\n                this.revealAll(true);\r\n            }\r\n        })\r\n        \r\n        let tempGrid = this.state.dataTable;\r\n        tempGrid[x][y].flagged = !tempGrid[x][y].flagged;\r\n        this.setState({dataTable: tempGrid});\r\n    }\r\n\r\n    reveal(id){\r\n        let {x,y} = id;\r\n        //this.boxesTable[x][y].type.prototype.reveal();\r\n        let tempGrid = this.state.dataTable;\r\n        console.log(id);\r\n        if (!tempGrid[x][y].flagged && !tempGrid[x][y].revealed)\r\n        {\r\n            tempGrid[x][y].revealed = true;\r\n            console.log(\"revealed:\" + x + \",\" + y);\r\n            this.setState({dataTable: tempGrid});\r\n\r\n            if (tempGrid[x][y].value == 0)\r\n            {\r\n                this.applyAround(id, this.reveal)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    convertId(id) { \r\n        if (typeof id == \"string\")\r\n        {\r\n            let [x,y]= id.split(\",\");\r\n            x = x * 1;\r\n            y = y * 1;\r\n            return {x,y};\r\n        }\r\n        return id;\r\n    };// to fix if on opposite case arises\r\n\r\n    gameOver(){\r\n        this.revealAll(true);\r\n        this.setState({gameStatus:\"lose\"});\r\n    }\r\n\r\n    revealAll(toReveal){\r\n        \r\n        this.setState({showAll: toReveal});\r\n    }\r\n\r\n    handleSuperman(event){\r\n        this.state.showAll? this.revealAll(false): this.revealAll(true);\r\n    }\r\n\r\n    superman(){\r\n\r\n        if (this.state.gameStatus !== \"ongoing\")\r\n        return;\r\n\r\n        let superman = <div>\r\n            <h4>Do you wish to see the answer? <img src={genie} \r\n                                                    className={\"Genie-pic\"} \r\n                                                    alt=\"see the truth!\" \r\n                                                    onClick={this.handleSuperman}/></h4>\r\n        </div>\r\n\r\n        return superman;\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n        <div>\r\n            <GameHeder height={this.state.height} \r\n                       width={this.state.width} \r\n                       mines={this.state.mines}\r\n                       flags={this.state.flags}\r\n                       update={this.updateGameSettings}\r\n                       status={this.state.gameStatus}></GameHeder>\r\n            {this.state.alert}\r\n            {this.formatBoxesTable()}\r\n            {this.superman()}\r\n        </div>\r\n        );\r\n    };\r\n}\r\n\r\n\r\nclass MineBox extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.checkIsMine = this.checkIsMine.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.picMap = {\r\n            0: pic0,\r\n            1: pic1,\r\n            2: pic2,\r\n            3: pic3,\r\n            4: pic4,\r\n            5: pic5,\r\n            6: pic6,\r\n            7: pic7,\r\n            8: pic8\r\n        }\r\n        \r\n        // this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    checkIsMine() {\r\n        return this.props.isMine;\r\n    }\r\n   \r\n\r\n    handleClick (e) {\r\n        const isShift = e.shiftKey;\r\n        console.log(e.target);\r\n        \r\n\r\n        let boxData = {\r\n            isMine: this.props.isMine,\r\n            value: this.props.value,\r\n            flag: this.props.flagged,\r\n            id: this.props.id\r\n        }\r\n\r\n        this.props.click(isShift, boxData);\r\n\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        \r\n          <img src={(this.props.showAll || this.props.revealed)? (this.props.isMine? mine : this.picMap[this.props.value]) : (this.props.flagged? flag: base)} className={\"Box-logo \"} alt={this.props.value} onClick={this.handleClick}/>\r\n        \r\n      );\r\n    }\r\n}\r\nexport default GameBody;\r\n"]},"metadata":{},"sourceType":"module"}