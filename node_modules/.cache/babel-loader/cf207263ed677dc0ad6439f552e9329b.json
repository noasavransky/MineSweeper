{"ast":null,"code":"var _jsxFileName = \"C:\\\\hometaskwix\\\\minesweeper\\\\src\\\\components\\\\gameBody.js\";\nimport React from 'react';\nimport logo from \"../logo.svg\";\nimport '../App.css';\nimport { Col, Row, Grid } from 'react-flexbox-grid';\n\nclass GameBody extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      height: 10,\n      width: 10,\n      mines: 10\n    };\n    this.box = this.box.bind(this); //this.boxesTable = this.boxesTable.bind(this);\n  }\n\n  newGame() {\n    this.updateGameSettings();\n    this.boxesTable = this.createBoxesTable();\n    this.setMines();\n    return /*#__PURE__*/React.createElement(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }\n    }, boxesTable.map(cols => /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }\n    }, cols.map(box => /*#__PURE__*/React.createElement(Col, {\n      sm: 12,\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 21\n      }\n    }, box)))));\n  }\n\n  updateGameSettings() {} // to get the new game numbers from the user and set themto the state;\n\n\n  createBoxesTable() {\n    var boxesTable = [];\n    boxesTable.fill([].fill(new MineBox(), 0, height - 1), 0, width - 1); // for (let w = 0; w < this.state.width; w++) \n    // {\n    //     let column = []\n    //     column.fill(new MineBox(), 0, height-1);\n    //     for (let h = 0; h < this.state.height; h++) \n    //     {\n    //         let id = w * this.state.width + h;\n    //         childern.push(new MineBox());\n    //     }          \n    //     this.boxesTable.push(column);\n    // }\n\n    return boxesTable;\n  }\n\n  setMines() {\n    for (mineCount = 0; mineCount < mines; mineCount++) {\n      let x = Math.floor(Math.random() * (width - 1));\n      let y = Math.floor(Math.random() * (height - 1));\n\n      if (this.boxesTable[x][y].checkIsMine()) {\n        this.boxesTable[x][y].setMine();\n        applyAround({\n          x,\n          y\n        }, increaseValue);\n      } else {\n        mineCount--;\n      }\n    }\n  }\n\n  applyAround(point, toApplyFunc) {\n    function checkAndApply(point) {\n      // check and apply\n      if (point.x >= 0 && point.y >= 0 && point.x > width && point.y > height) {\n        toApplyFunc(point);\n      }\n    }\n\n    let x = point.x;\n    let y = point.y; // left side          \n\n    checkAndApply({\n      x: x - 1,\n      y\n    }); // <-\n\n    checkAndApply({\n      x: x - 1,\n      y: y - 1\n    }); //<-^\n\n    checkAndApply({\n      x: x - 1,\n      y: y + 1\n    }); //<-v\n    // right side\n\n    checkAndApply({\n      x: x + 1,\n      y\n    }); // ->\n\n    checkAndApply({\n      x: x + 1,\n      y: y - 1\n    }); // ->^\n\n    checkAndApply({\n      x: x + 1,\n      y: y + 1\n    }); // -> v\n    // up and down\n\n    checkAndApply({\n      x,\n      y: y - 1\n    }); // ^\n\n    checkAndApply({\n      x,\n      y: y + 1\n    }); // V\n  }\n\n  increaseValue(point) {\n    this.boxesTable[point.x][point.y].increaseValue();\n  }\n\n  box(id) {\n    return /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(MineBox, {\n      id: id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 20\n      }\n    }));\n  } // boxesTable(props) {\n  //     let table = React.createElement(<table></table>)\n  //     let rows = [];\n  //     for (let h = 0; h < this.state.height; h++) \n  //     {\n  //         let row = React.createElement(<tr></tr>);\n  //         let childern = [];\n  //         for (let w = 0; w < this.state.width; w++) \n  //         {\n  //             let id = h * this.state.width + w;\n  //             childern.push(this.box(id));\n  //         }\n  //         row. = childern;\n  //         rows.push(row);\n  //     }\n  //     table.props.children = rows;\n  //     return table;\n  // }\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }\n    }, this.newGame());\n  }\n\n}\n\nclass MineBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isMine: false,\n      value: 0,\n      flagged: false\n    };\n    this.checkIsMine = this.checkIsMine.bind(this);\n    this.setMine = this.setMine.bind(this);\n    this.changeFlagState = this.changeFlagState.bind(this);\n    this.increaseValue = this.increaseValue.bind(this); // this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  checkIsMine() {\n    return this.state.isMine;\n  }\n\n  setMine() {\n    this.setState({\n      isMine: true\n    });\n  }\n\n  changeFlagState() {\n    let nextFlagState = !this.state.flagged;\n    this.setState(prevState => {\n      flagged: !prevState.flagged;\n    });\n    return nextFlagState;\n  }\n\n  increaseValue() {\n    this.setState(prevState => {\n      value: prevState.value++;\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: logo,\n      className: \"Box-logo\",\n      alt: \"logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\n\nexport default GameBody;","map":{"version":3,"sources":["C:/hometaskwix/minesweeper/src/components/gameBody.js"],"names":["React","Col","Row","Grid","GameBody","Component","constructor","props","state","height","width","mines","box","bind","newGame","updateGameSettings","boxesTable","createBoxesTable","setMines","map","cols","fill","MineBox","mineCount","x","Math","floor","random","y","checkIsMine","setMine","applyAround","increaseValue","point","toApplyFunc","checkAndApply","id","render","isMine","value","flagged","changeFlagState","setState","nextFlagState","prevState","logo"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAO,YAAP;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,QAA+B,oBAA/B;;AAEA,MAAMC,QAAN,SAAuBJ,KAAK,CAACK,SAA7B,CAAuC;AAEnCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,MAAM,EAAE,EAAV;AAAcC,MAAAA,KAAK,EAAE,EAArB;AAAyBC,MAAAA,KAAK,EAAE;AAAhC,KAAb;AACA,SAAKC,GAAL,GAAW,KAAKA,GAAL,CAASC,IAAT,CAAc,IAAd,CAAX,CAHe,CAIf;AACH;;AAEDC,EAAAA,OAAO,GAAG;AACN,SAAKC,kBAAL;AACA,SAAKC,UAAL,GAAkB,KAAKC,gBAAL,EAAlB;AACA,SAAKC,QAAL;AAEA,wBACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGF,UAAU,CAACG,GAAX,CAAgBC,IAAD,iBACd,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,IAAI,CAACD,GAAL,CAAUP,GAAD,iBACR,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAa,MAAA,EAAE,EAAE,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,GADH,CADD,CADH,CADD,CADH,CADJ;AAeH;;AAEDG,EAAAA,kBAAkB,GAAG,CAAE,CA/BY,CA+BX;;;AAExBE,EAAAA,gBAAgB,GAAG;AACf,QAAID,UAAU,GAAG,EAAjB;AACAA,IAAAA,UAAU,CAACK,IAAX,CAAgB,GAAGA,IAAH,CAAQ,IAAIC,OAAJ,EAAR,EAAuB,CAAvB,EAA0Bb,MAAM,GAAG,CAAnC,CAAhB,EAAuD,CAAvD,EAA0DC,KAAK,GAAG,CAAlE,EAFe,CAIf;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA,WAAOM,UAAP;AACH;;AAEDE,EAAAA,QAAQ,GAAG;AACP,SAAIK,SAAS,GAAG,CAAhB,EAAmBA,SAAS,GAAGZ,KAA/B,EAAsCY,SAAS,EAA/C,EACA;AACI,UAAIC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBjB,KAAK,GAAG,CAAzB,CAAX,CAAR;AACA,UAAIkB,CAAC,GAAGH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBlB,MAAM,GAAG,CAA1B,CAAX,CAAR;;AACA,UAAG,KAAKO,UAAL,CAAgBQ,CAAhB,EAAmBI,CAAnB,EAAsBC,WAAtB,EAAH,EACA;AACI,aAAKb,UAAL,CAAgBQ,CAAhB,EAAmBI,CAAnB,EAAsBE,OAAtB;AACAC,QAAAA,WAAW,CAAC;AAACP,UAAAA,CAAD;AAAGI,UAAAA;AAAH,SAAD,EAAOI,aAAP,CAAX;AACH,OAJD,MAMA;AACIT,QAAAA,SAAS;AACZ;AACJ;AAEJ;;AAEDQ,EAAAA,WAAW,CAACE,KAAD,EAAOC,WAAP,EACX;AACI,aAASC,aAAT,CAAuBF,KAAvB,EAA6B;AAAC;AAC1B,UAAGA,KAAK,CAACT,CAAN,IAAW,CAAX,IAAgBS,KAAK,CAACL,CAAN,IAAW,CAA3B,IAAgCK,KAAK,CAACT,CAAN,GAAUd,KAA1C,IAAmDuB,KAAK,CAACL,CAAN,GAAUnB,MAAhE,EACA;AACIyB,QAAAA,WAAW,CAACD,KAAD,CAAX;AACH;AACJ;;AAED,QAAIT,CAAC,GAAGS,KAAK,CAACT,CAAd;AACA,QAAII,CAAC,GAAGK,KAAK,CAACL,CAAd,CATJ,CAWI;;AACAO,IAAAA,aAAa,CAAC;AAACX,MAAAA,CAAC,EAAEA,CAAC,GAAG,CAAR;AAAWI,MAAAA;AAAX,KAAD,CAAb,CAZJ,CAYiC;;AAC7BO,IAAAA,aAAa,CAAC;AAACX,MAAAA,CAAC,EAAEA,CAAC,GAAG,CAAR;AAAWI,MAAAA,CAAC,EAAEA,CAAC,GAAG;AAAlB,KAAD,CAAb,CAbJ,CAawC;;AACpCO,IAAAA,aAAa,CAAC;AAACX,MAAAA,CAAC,EAAEA,CAAC,GAAG,CAAR;AAAWI,MAAAA,CAAC,EAAEA,CAAC,GAAG;AAAlB,KAAD,CAAb,CAdJ,CAcuC;AAEnC;;AACAO,IAAAA,aAAa,CAAC;AAACX,MAAAA,CAAC,EAAEA,CAAC,GAAG,CAAR;AAAWI,MAAAA;AAAX,KAAD,CAAb,CAjBJ,CAiBiC;;AAC7BO,IAAAA,aAAa,CAAC;AAACX,MAAAA,CAAC,EAAEA,CAAC,GAAG,CAAR;AAAWI,MAAAA,CAAC,EAAEA,CAAC,GAAE;AAAjB,KAAD,CAAb,CAlBJ,CAkBuC;;AACnCO,IAAAA,aAAa,CAAC;AAACX,MAAAA,CAAC,EAAEA,CAAC,GAAG,CAAR;AAAWI,MAAAA,CAAC,EAAEA,CAAC,GAAG;AAAlB,KAAD,CAAb,CAnBJ,CAmBuC;AAEnC;;AACAO,IAAAA,aAAa,CAAC;AAACX,MAAAA,CAAD;AAAII,MAAAA,CAAC,EAAEA,CAAC,GAAG;AAAX,KAAD,CAAb,CAtBJ,CAsBiC;;AAC7BO,IAAAA,aAAa,CAAC;AAACX,MAAAA,CAAD;AAAII,MAAAA,CAAC,EAAEA,CAAC,GAAG;AAAX,KAAD,CAAb,CAvBJ,CAuBgC;AAC/B;;AAEDI,EAAAA,aAAa,CAAEC,KAAF,EAAS;AAClB,SAAKjB,UAAL,CAAgBiB,KAAK,CAACT,CAAtB,EAAyBS,KAAK,CAACL,CAA/B,EAAkCI,aAAlC;AACH;;AAEDpB,EAAAA,GAAG,CAACwB,EAAD,EAAK;AACJ,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAI,oBAAC,OAAD;AAAS,MAAA,EAAE,EAAEA,EAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAJ,CAAP;AACH,GA1GkC,CA4GnC;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;;;AAEAC,EAAAA,MAAM,GAAG;AAEL,wBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKvB,OAAL,EADL,CADA;AAKH;;AA9IkC;;AAkJvC,MAAMQ,OAAN,SAAsBtB,KAAK,CAACK,SAA5B,CAAsC;AAElCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAE8B,MAAAA,MAAM,EAAE,KAAV;AAAiBC,MAAAA,KAAK,EAAE,CAAxB;AAA2BC,MAAAA,OAAO,EAAE;AAApC,KAAb;AACA,SAAKX,WAAL,GAAmB,KAAKA,WAAL,CAAiBhB,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKiB,OAAL,GAAe,KAAKA,OAAL,CAAajB,IAAb,CAAkB,IAAlB,CAAf;AACA,SAAK4B,eAAL,GAAuB,KAAKA,eAAL,CAAqB5B,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAKmB,aAAL,GAAqB,KAAKA,aAAL,CAAmBnB,IAAnB,CAAwB,IAAxB,CAArB,CANe,CAOf;AACH;;AAEDgB,EAAAA,WAAW,GAAG;AACV,WAAO,KAAKrB,KAAL,CAAW8B,MAAlB;AACH;;AAEDR,EAAAA,OAAO,GAAG;AACN,SAAKY,QAAL,CAAc;AAACJ,MAAAA,MAAM,EAAC;AAAR,KAAd;AACH;;AAEDG,EAAAA,eAAe,GAAG;AACd,QAAIE,aAAa,GAAG,CAAC,KAAKnC,KAAL,CAAWgC,OAAhC;AACA,SAAKE,QAAL,CAAeE,SAAD,IAAc;AAACJ,MAAAA,OAAO,EAAE,CAACI,SAAS,CAACJ,OAAX;AAAmB,KAAzD;AACA,WAAOG,aAAP;AACH;;AAEDX,EAAAA,aAAa,GAAG;AACZ,SAAKU,QAAL,CAAeE,SAAD,IAAc;AAACL,MAAAA,KAAK,EAAEK,SAAS,CAACL,KAAV;AAAkB,KAAtD;AACH;;AAEDF,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,GAAG,EAAEQ,IAAV;AAAgB,MAAA,SAAS,EAAC,UAA1B;AAAqC,MAAA,GAAG,EAAC,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;;AApCiC;;AAsCtC,eAAezC,QAAf","sourcesContent":["import React from 'react';\r\nimport logo from '../logo.svg';\r\nimport '../App.css';\r\nimport { Col, Row, Grid } from 'react-flexbox-grid'\r\n\r\nclass GameBody extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { height: 10, width: 10, mines: 10 };\r\n        this.box = this.box.bind(this);\r\n        //this.boxesTable = this.boxesTable.bind(this);\r\n    }\r\n\r\n    newGame() {\r\n        this.updateGameSettings();\r\n        this.boxesTable = this.createBoxesTable();\r\n        this.setMines();\r\n\r\n        return (\r\n            <Grid>\r\n              {boxesTable.map((cols) => (\r\n                <Row>\r\n                  {cols.map((box) => (\r\n                    <Col sm={12} md={12}>\r\n                      {box}\r\n                    </Col>\r\n                  ))}\r\n                </Row>\r\n              ))}\r\n            </Grid>\r\n        )\r\n        \r\n\r\n    }\r\n\r\n    updateGameSettings() {} // to get the new game numbers from the user and set themto the state;\r\n\r\n    createBoxesTable() {\r\n        var boxesTable = [];\r\n        boxesTable.fill([].fill(new MineBox(), 0, height - 1), 0, width - 1)\r\n\r\n        // for (let w = 0; w < this.state.width; w++) \r\n        // {\r\n        //     let column = []\r\n\r\n        //     column.fill(new MineBox(), 0, height-1);\r\n\r\n        //     for (let h = 0; h < this.state.height; h++) \r\n        //     {\r\n        //         let id = w * this.state.width + h;\r\n        //         childern.push(new MineBox());\r\n        //     }          \r\n\r\n        //     this.boxesTable.push(column);\r\n        // }\r\n\r\n        return boxesTable;\r\n    }\r\n\r\n    setMines() {\r\n        for(mineCount = 0; mineCount < mines; mineCount++)\r\n        {\r\n            let x = Math.floor(Math.random() * (width - 1));\r\n            let y = Math.floor(Math.random() * (height - 1));\r\n            if(this.boxesTable[x][y].checkIsMine())\r\n            {\r\n                this.boxesTable[x][y].setMine()\r\n                applyAround({x,y},increaseValue)\r\n            }\r\n            else\r\n            {\r\n                mineCount--\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    applyAround(point,toApplyFunc)\r\n    {\r\n        function checkAndApply(point){// check and apply\r\n            if(point.x >= 0 && point.y >= 0 && point.x > width && point.y > height) \r\n            {\r\n                toApplyFunc(point)\r\n            }\r\n        }\r\n\r\n        let x = point.x;\r\n        let y = point.y;\r\n\r\n        // left side          \r\n        checkAndApply({x: x - 1, y});// <-\r\n        checkAndApply({x: x - 1, y: y - 1});//<-^\r\n        checkAndApply({x: x - 1, y: y + 1})//<-v\r\n          \r\n        // right side\r\n        checkAndApply({x: x + 1, y});// ->\r\n        checkAndApply({x: x + 1, y: y -1});// ->^\r\n        checkAndApply({x: x + 1, y: y + 1})// -> v\r\n          \r\n        // up and down\r\n        checkAndApply({x, y: y - 1});// ^\r\n        checkAndApply({x, y: y + 1})// V\r\n    }\r\n\r\n    increaseValue (point) {\r\n        this.boxesTable[point.x][point.y].increaseValue();\r\n    }\r\n\r\n    box(id) {        \r\n        return <td><MineBox id={id}></MineBox></td>;\r\n    } \r\n\r\n    // boxesTable(props) {\r\n\r\n    //     let table = React.createElement(<table></table>)\r\n        \r\n    //     let rows = [];\r\n\r\n    //     for (let h = 0; h < this.state.height; h++) \r\n    //     {\r\n    //         let row = React.createElement(<tr></tr>);\r\n\r\n    //         let childern = [];\r\n    //         for (let w = 0; w < this.state.width; w++) \r\n    //         {\r\n    //             let id = h * this.state.width + w;\r\n    //             childern.push(this.box(id));\r\n    //         }\r\n\r\n    //         row. = childern;\r\n\r\n    //         rows.push(row);\r\n    //     }\r\n        \r\n    //     table.props.children = rows;\r\n        \r\n    //     return table;\r\n    // }\r\n\r\n    render() {\r\n        \r\n        return (\r\n        <div>\r\n            {this.newGame()}\r\n        </div>\r\n        );\r\n    };\r\n}\r\n\r\n\r\nclass MineBox extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { isMine: false, value: 0, flagged: false };\r\n        this.checkIsMine = this.checkIsMine.bind(this);\r\n        this.setMine = this.setMine.bind(this);\r\n        this.changeFlagState = this.changeFlagState.bind(this);\r\n        this.increaseValue = this.increaseValue.bind(this);\r\n        // this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    checkIsMine() {\r\n        return this.state.isMine;\r\n    }\r\n\r\n    setMine() {\r\n        this.setState({isMine:true});\r\n    }\r\n\r\n    changeFlagState() {\r\n        let nextFlagState = !this.state.flagged;\r\n        this.setState((prevState)=> {flagged: !prevState.flagged});\r\n        return nextFlagState;\r\n    }\r\n\r\n    increaseValue() {        \r\n        this.setState((prevState)=> {value: prevState.value++});        \r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <div>\r\n          <img src={logo} className=\"Box-logo\" alt=\"logo\" />\r\n        </div>\r\n      );\r\n    }\r\n}\r\nexport default GameBody;\r\n"]},"metadata":{},"sourceType":"module"}