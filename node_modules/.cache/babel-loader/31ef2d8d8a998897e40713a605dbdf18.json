{"ast":null,"code":"var _jsxFileName = \"C:\\\\hometaskwix\\\\minesweeper\\\\src\\\\components\\\\gameHeader.js\";\nimport React from 'react';\nimport '../App.css';\nimport win from '../images/win.png';\nimport lose from '../images/lose.png';\nimport go from '../images/go.png';\nimport mines from '../images/bomb.png';\nimport width from '../images/width.png';\nimport height from '../images/height.png';\nimport flags from '../images/flags.png';\n\nclass GameHeader extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 10,\n      height: 10,\n      mines: 10\n    };\n    this.GameStatus = this.GameStatus.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleStart = this.handleStart.bind(this);\n  }\n\n  GameStatus() {\n    let elem;\n    var picMap = {\n      win,\n      lose,\n      width,\n      height,\n      mines\n    };\n\n    if (this.props.status === \"pre\") {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 17\n        }\n      }, \"Mine Sweeper \", /*#__PURE__*/React.createElement(\"img\", {\n        src: mines,\n        className: \"Head-pic\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 34\n        }\n      })), this.StartNewGame());\n    }\n\n    if (this.props.status === \"win\" || this.props.status === \"lose\") {\n      elem = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 20\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 17\n        }\n      }, \"You \", this.props.status.toUpperCase(), \"!\", /*#__PURE__*/React.createElement(\"img\", {\n        src: picMap[this.props.status],\n        className: \"Win-pic\",\n        alt: this.props.status,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 17\n        }\n      })), this.StartNewGame());\n    } else {\n      let flagsCount = this.props.mines - (this.props.flags.good + this.props.flags.bad);\n      elem = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 20\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 17\n        }\n      }, [\"Height\", \"Width\", \"Mines\"].map(curr => {\n        return /*#__PURE__*/React.createElement(\"span\", {\n          className: \"Header-title\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 71\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          src: picMap[curr.toLowerCase()],\n          className: \"Header-pic\",\n          alt: curr,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 25\n          }\n        }), \" \", curr, \" \", this.props[curr.toLowerCase()]);\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"Header-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: flags,\n        className: \"Header-pic\",\n        alt: \"flags\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }\n      }), \" Remaining Flags \", flagsCount)));\n    }\n\n    return elem;\n  }\n\n  StartNewGame() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    }, \"Do you want to start a new game?\"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"Header-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }, \"Board Width: \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      value: this.state.width,\n      name: \"width\",\n      min: \"0\",\n      max: \"300\",\n      onChange: this.handleChange,\n      className: \"Game-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 57\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"Header-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, \"Board Height: \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      value: this.state.height,\n      name: \"height\",\n      min: \"0\",\n      max: \"300\",\n      onChange: this.handleChange,\n      className: \"Game-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 58\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"Header-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    }, \"Mines: \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      value: this.state.mines,\n      name: \"mines\",\n      min: \"0\",\n      max: this.state.width * this.state.height,\n      onChange: this.handleChange,\n      className: \"Game-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 51\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      onClick: this.handleStart,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    }, \"Start Game \", /*#__PURE__*/React.createElement(\"img\", {\n      src: go,\n      className: \"Start-pic\",\n      alt: \"start game!\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 32\n      }\n    }))));\n  }\n\n  handleStart(event) {\n    const newData = {\n      height: this.state.height,\n      width: this.state.width,\n      mines: this.state.mines\n    };\n    this.props.update(newData);\n  }\n\n  handleChange(event) {\n    const target = event.target;\n    let value = target.value;\n    const name = target.name;\n    if (value < 0) value = 0;\n\n    if (name === \"width\" || name === \"height\") {\n      value = Math.min(value, 300);\n    }\n\n    if (name === \"mines\") {\n      value = Math.min(value, this.state.height * this.state.width);\n    }\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  render() {\n    return this.GameStatus();\n  }\n\n}\n\nexport default GameHeader;","map":{"version":3,"sources":["C:/hometaskwix/minesweeper/src/components/gameHeader.js"],"names":["React","win","lose","go","mines","width","height","flags","GameHeader","Component","constructor","props","state","GameStatus","bind","handleChange","handleStart","elem","picMap","status","StartNewGame","toUpperCase","flagsCount","good","bad","map","curr","toLowerCase","event","newData","update","target","value","name","Math","min","setState","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport '../App.css';\r\nimport win from '../images/win.png';\r\nimport lose from '../images/lose.png';\r\nimport go from '../images/go.png';\r\nimport mines from '../images/bomb.png';\r\nimport width from '../images/width.png';\r\nimport height from '../images/height.png';\r\nimport flags from '../images/flags.png';\r\n\r\n\r\nclass GameHeader extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {width: 10, height: 10, mines: 10}\r\n        this.GameStatus = this.GameStatus.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleStart = this.handleStart.bind(this);\r\n    }\r\n\r\n    GameStatus () {\r\n        let elem;\r\n        var picMap ={win, lose, width, height, mines }\r\n\r\n        if (this.props.status === \"pre\") {\r\n            return (<div >\r\n                <h1>\r\n                    Mine Sweeper <img src={mines} className={\"Head-pic\"}/>\r\n                </h1>                \r\n                {this.StartNewGame()}\r\n            </div>)\r\n            \r\n        }\r\n\r\n        if (this.props.status === \"win\" || this.props.status === \"lose\") {\r\n            elem = <div>\r\n                <h2>You {this.props.status.toUpperCase()}! \r\n                <img src={picMap[this.props.status]} className={\"Win-pic\"} alt={this.props.status}/></h2>\r\n                {this.StartNewGame()}\r\n            </div>;\r\n        }\r\n        else {\r\n            let flagsCount = this.props.mines - (this.props.flags.good + this.props.flags.bad);\r\n            elem = <div>\r\n                <h1>\r\n                    {[\"Height\", \"Width\", \"Mines\"].map(curr => {return <span className=\"Header-title\">\r\n                        <img src={picMap[curr.toLowerCase()]} className={\"Header-pic\"} alt={curr}/> {curr} {this.props[curr.toLowerCase()]}\r\n                    </span>})}\r\n                    <br></br>\r\n                    <span className=\"Header-title\">\r\n                        <img src={flags} className={\"Header-pic\"} alt=\"flags\"/> Remaining Flags {flagsCount}\r\n                    </span>\r\n                </h1>\r\n                </div>;\r\n        }\r\n        return elem;\r\n    }\r\n\r\n    StartNewGame () {\r\n        return (<div>\r\n            <h3>Do you want to start a new game?</h3>\r\n            <span className=\"Header-title\">Board Width: <input  type=\"number\" \r\n                                                                value={this.state.width}\r\n                                                                name=\"width\"\r\n                                                                min=\"0\"\r\n                                                                max=\"300\"\r\n                                                                onChange={this.handleChange}\r\n                                                                className=\"Game-input\"></input> \r\n            </span>\r\n            <span className=\"Header-title\">Board Height: <input type=\"number\" \r\n                                                                value={this.state.height}\r\n                                                                name=\"height\" \r\n                                                                min=\"0\"\r\n                                                                max=\"300\"\r\n                                                                onChange={this.handleChange}\r\n                                                                className=\"Game-input\"></input> \r\n            </span>\r\n            <span className=\"Header-title\">Mines: <input    type=\"number\" \r\n                                                            value={this.state.mines}\r\n                                                            name=\"mines\"\r\n                                                            min=\"0\"\r\n                                                            max={this.state.width * this.state.height}\r\n                                                            onChange={this.handleChange}\r\n                                                            className=\"Game-input\"></input> \r\n            </span>\r\n            <div onClick={this.handleStart}>\r\n                <h2>\r\n                    Start Game <img src={go} className={\"Start-pic\"} alt=\"start game!\"/>\r\n                </h2>\r\n            </div>\r\n        </div>);  \r\n    }\r\n\r\n    handleStart(event) {\r\n        const newData = {\r\n            height: this.state.height,\r\n            width: this.state.width,\r\n            mines: this.state.mines,\r\n        }\r\n        this.props.update(newData);\r\n    }\r\n\r\n    handleChange (event) {\r\n        const target = event.target;\r\n        let value = target.value;\r\n        const name = target.name;\r\n\r\n        if (value < 0) value = 0;\r\n\r\n        if (name === \"width\" || name === \"height\") {\r\n            value = Math.min(value, 300);\r\n        }\r\n        \r\n        if (name === \"mines\") {\r\n            value = Math.min(value ,this.state.height * this.state.width);\r\n        }\r\n\r\n        this.setState({[name]:value});\r\n    }\r\n\r\n    render() {\r\n      return this.GameStatus();\r\n    }\r\n  }\r\n\r\nexport default GameHeader;\r\n"]},"metadata":{},"sourceType":"module"}