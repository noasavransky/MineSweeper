{"ast":null,"code":"var _jsxFileName = \"C:\\\\hometaskwix\\\\minesweeper\\\\src\\\\components\\\\gameBody.js\";\nimport React from 'react';\nimport logo from '../images/logo192.png';\nimport '../App.css';\nimport { Col, Row, Grid } from 'react-flexbox-grid';\n\nclass GameBody extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      height: 100,\n      width: 100,\n      mines: 10\n    };\n    this.newGame = this.newGame.bind(this);\n    this.updateGameSettings = this.updateGameSettings.bind(this);\n    this.createBoxesTable = this.createBoxesTable.bind(this);\n    this.setMines = this.setMines.bind(this);\n    this.applyAround = this.applyAround.bind(this);\n    this.increaseValue = this.increaseValue.bind(this);\n    this.onClick = this.onClick.bind(this); //this.boxesTable = this.boxesTable.bind(this);\n  }\n\n  newGame() {\n    console.log(\"new Game\");\n    this.updateGameSettings();\n    this.boxesTable = this.createBoxesTable();\n    this.setMines();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Mine-grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }\n    }, this.boxesTable.map(cols => /*#__PURE__*/React.createElement(Row, {\n      className: \"Mine-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }\n    }, cols.map(box => /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }\n    }, box.render())))));\n  }\n\n  updateGameSettings() {} // to get the new game numbers from the user and set themto the state;\n\n\n  createBoxesTable() {\n    console.log(\"create Boxes State\");\n    var boxesTable = [];\n    boxesTable.length = this.state.width;\n    var column = [];\n    column.length = this.state.height;\n    column.fill(new MineBox({\n      click: this.onClick\n    }));\n    boxesTable.fill(column); // for (let w = 0; w < this.state.width; w++) \n    // {\n    //     let column = []\n    //     column.fill(new MineBox(), 0, height-1);\n    //     for (let h = 0; h < this.state.height; h++) \n    //     {\n    //         let id = w * this.state.width + h;\n    //         childern.push(new MineBox());\n    //     }          \n    //     this.boxesTable.push(column);\n\n    return boxesTable;\n  }\n\n  setMines() {\n    console.log(\"set Mines\");\n\n    for (let mineCount = 0; mineCount < this.state.mines; mineCount++) {\n      let x = Math.floor(Math.random() * (this.state.width - 1));\n      let y = Math.floor(Math.random() * (this.state.height - 1));\n\n      if (!this.boxesTable[x][y].checkIsMine()) {\n        this.boxesTable[x][y].setMine();\n        this.applyAround({\n          x,\n          y\n        }, this.increaseValue);\n      } else {\n        mineCount--;\n      }\n    }\n  }\n\n  applyAround(point, toApplyFunc) {\n    console.log(\"apply Around\");\n    let height = this.state.height;\n    let width = this.state.width;\n\n    function checkAndApply(point) {\n      // check and apply\n      if (point.x >= 0 && point.y >= 0 && point.x > width && point.y > height) {\n        toApplyFunc(point);\n      }\n    }\n\n    let x = point.x;\n    let y = point.y; // left side          \n\n    checkAndApply({\n      x: x - 1,\n      y\n    }); // <-\n\n    checkAndApply({\n      x: x - 1,\n      y: y - 1\n    }); //<-^\n\n    checkAndApply({\n      x: x - 1,\n      y: y + 1\n    }); //<-v\n    // right side\n\n    checkAndApply({\n      x: x + 1,\n      y\n    }); // ->\n\n    checkAndApply({\n      x: x + 1,\n      y: y - 1\n    }); // ->^\n\n    checkAndApply({\n      x: x + 1,\n      y: y + 1\n    }); // -> v\n    // up and down\n\n    checkAndApply({\n      x,\n      y: y - 1\n    }); // ^\n\n    checkAndApply({\n      x,\n      y: y + 1\n    }); // V\n  }\n\n  increaseValue(point) {\n    console.log(\"increase Value\");\n    this.boxesTable[point.x][point.y].increaseValue();\n  }\n\n  onClick(event, more) {\n    console.log(event);\n    console.log(more);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }\n    }, this.newGame());\n  }\n\n}\n\nclass MineBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isMine: false,\n      value: 0,\n      flagged: false\n    };\n    this.checkIsMine = this.checkIsMine.bind(this);\n    this.setMine = this.setMine.bind(this);\n    this.changeFlagState = this.changeFlagState.bind(this);\n    this.increaseValue = this.increaseValue.bind(this); // this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  checkIsMine() {\n    return this.state.isMine;\n  }\n\n  setMine() {\n    console.log(\"inner set Mine\");\n    this.setState({\n      isMine: true\n    });\n  }\n\n  changeFlagState() {\n    let nextFlagState = !this.state.flagged;\n    this.setState(prevState => ({\n      flagged: !prevState.flagged\n    }));\n    return nextFlagState;\n  }\n\n  increaseValue() {\n    this.setState(prevState => {\n      value: prevState.value++;\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"img\", {\n      src: logo,\n      className: \"Box-logo\",\n      alt: \"logo\",\n      onClick: this.props.click,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }\n    });\n  }\n\n}\n\nexport default GameBody;","map":{"version":3,"sources":["C:/hometaskwix/minesweeper/src/components/gameBody.js"],"names":["React","logo","Col","Row","Grid","GameBody","Component","constructor","props","state","height","width","mines","newGame","bind","updateGameSettings","createBoxesTable","setMines","applyAround","increaseValue","onClick","console","log","boxesTable","map","cols","box","render","length","column","fill","MineBox","click","mineCount","x","Math","floor","random","y","checkIsMine","setMine","point","toApplyFunc","checkAndApply","event","more","isMine","value","flagged","changeFlagState","setState","nextFlagState","prevState"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport logo from '../images/logo192.png';\r\nimport '../App.css';\r\nimport { Col, Row, Grid } from 'react-flexbox-grid'\r\n\r\nclass GameBody extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { height: 100, width: 100, mines: 10 };\r\n\r\n        this.newGame = this.newGame.bind(this);\r\n        this.updateGameSettings = this.updateGameSettings.bind(this);\r\n        this.createBoxesTable = this.createBoxesTable.bind(this);\r\n        this.setMines = this.setMines.bind(this);\r\n        this.applyAround = this.applyAround.bind(this);\r\n        this.increaseValue = this.increaseValue.bind(this);\r\n        this.onClick = this.onClick.bind(this);\r\n        //this.boxesTable = this.boxesTable.bind(this);\r\n    }\r\n\r\n    newGame() {\r\n        console.log(\"new Game\");\r\n        this.updateGameSettings();\r\n        this.boxesTable = this.createBoxesTable();\r\n        this.setMines();\r\n\r\n        return (\r\n            <div className=\"Mine-grid\">\r\n              {this.boxesTable.map((cols) => (\r\n                <Row className=\"Mine-row\">\r\n                  {cols.map((box) => (\r\n                    <Col >\r\n                      {box.render()}\r\n                    </Col>\r\n                  ))}\r\n                </Row>\r\n              ))}\r\n            </div>\r\n        )\r\n                    \r\n    }\r\n\r\n    updateGameSettings() {} // to get the new game numbers from the user and set themto the state;\r\n\r\n    createBoxesTable() {\r\n        console.log(\"create Boxes State\");\r\n        var boxesTable = [];\r\n        boxesTable.length = this.state.width;\r\n\r\n        var column = [];\r\n        column.length = this.state.height;\r\n        column.fill(new MineBox({click: this.onClick}));\r\n           \r\n        boxesTable.fill(column);\r\n        \r\n        // for (let w = 0; w < this.state.width; w++) \r\n        // {\r\n        //     let column = []\r\n\r\n        //     column.fill(new MineBox(), 0, height-1);\r\n\r\n        //     for (let h = 0; h < this.state.height; h++) \r\n        //     {\r\n        //         let id = w * this.state.width + h;\r\n        //         childern.push(new MineBox());\r\n        //     }          \r\n\r\n        //     this.boxesTable.push(column);\r\n\r\n        return boxesTable;\r\n    }\r\n\r\n    setMines() {\r\n        console.log(\"set Mines\");\r\n        for(let mineCount = 0; mineCount < this.state.mines; mineCount++)\r\n        {\r\n            let x = Math.floor(Math.random() * (this.state.width - 1));\r\n            let y = Math.floor(Math.random() * (this.state.height - 1));\r\n            \r\n            if(!this.boxesTable[x][y].checkIsMine())\r\n            {\r\n                this.boxesTable[x][y].setMine()\r\n                this.applyAround({x,y},this.increaseValue)\r\n            }\r\n            else\r\n            {\r\n                mineCount--\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    applyAround(point,toApplyFunc)\r\n    {        \r\n        console.log(\"apply Around\");\r\n        \r\n        let height = this.state.height;\r\n        let width = this.state.width;\r\n        function checkAndApply(point){// check and apply\r\n            if(point.x >= 0 && point.y >= 0 && point.x > width && point.y > height) \r\n            {\r\n                toApplyFunc(point)\r\n            }\r\n        }\r\n\r\n        let x = point.x;\r\n        let y = point.y;\r\n\r\n        // left side          \r\n        checkAndApply({x: x - 1, y});// <-\r\n        checkAndApply({x: x - 1, y: y - 1});//<-^\r\n        checkAndApply({x: x - 1, y: y + 1})//<-v\r\n          \r\n        // right side\r\n        checkAndApply({x: x + 1, y});// ->\r\n        checkAndApply({x: x + 1, y: y -1});// ->^\r\n        checkAndApply({x: x + 1, y: y + 1})// -> v\r\n          \r\n        // up and down\r\n        checkAndApply({x, y: y - 1});// ^\r\n        checkAndApply({x, y: y + 1})// V\r\n    }\r\n\r\n    increaseValue (point) {\r\n        console.log(\"increase Value\");\r\n        this.boxesTable[point.x][point.y].increaseValue();\r\n    }\r\n\r\n    onClick (event, more) {\r\n        console.log(event);\r\n        console.log(more);\r\n\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n        <div>\r\n            {this.newGame()}\r\n        </div>\r\n        );\r\n    };\r\n}\r\n\r\n\r\nclass MineBox extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { isMine: false, value: 0, flagged: false };\r\n        this.checkIsMine = this.checkIsMine.bind(this);\r\n        this.setMine = this.setMine.bind(this);\r\n        this.changeFlagState = this.changeFlagState.bind(this);\r\n        this.increaseValue = this.increaseValue.bind(this);\r\n        // this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    checkIsMine() {\r\n        return this.state.isMine;\r\n    }\r\n\r\n    setMine() {\r\n        console.log(\"inner set Mine\");\r\n        this.setState({isMine:true});\r\n    }\r\n\r\n    changeFlagState() {\r\n        let nextFlagState = !this.state.flagged;\r\n        this.setState((prevState)=> ({flagged: !prevState.flagged}));\r\n        return nextFlagState;\r\n    }\r\n\r\n    increaseValue() {        \r\n        this.setState((prevState)=> {value: prevState.value++});        \r\n    }\r\n\r\n    render() {\r\n      return (\r\n        \r\n          <img src={logo} className=\"Box-logo\" alt=\"logo\" onClick={this.props.click}/>\r\n        \r\n      );\r\n    }\r\n}\r\nexport default GameBody;\r\n"]},"metadata":{},"sourceType":"module"}