{"ast":null,"code":"var _jsxFileName = \"C:\\\\hometaskwix\\\\minesweeper\\\\src\\\\components\\\\gameBody.js\";\nimport React from 'react';\nimport logo from '../images/logo192.png';\nimport '../App.css';\nimport { Col, Row, Grid } from 'react-flexbox-grid';\n\nclass GameBody extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      height: 10,\n      width: 10,\n      mines: 10\n    };\n    this.newGame = this.newGame.bind(this);\n    this.updateGameSettings = this.updateGameSettings.bind(this);\n    this.createBoxesTable = this.createBoxesTable.bind(this);\n    this.setMines = this.setMines.bind(this);\n    this.applyAround = this.applyAround.bind(this);\n    this.increaseValue = this.increaseValue.bind(this);\n    this.onClick = this.onClick.bind(this); //this.boxesTable = this.boxesTable.bind(this);\n  }\n\n  newGame() {\n    console.log(\"new Game\");\n    this.updateGameSettings();\n    this.boxesTable = this.createBoxesTable();\n    this.setMines();\n    var id = 0;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Mine-grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }\n    }, this.boxesTable.map((cols, w) => /*#__PURE__*/React.createElement(Row, {\n      key: id++,\n      className: \"Mine-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }\n    }, cols.map((box, h) => /*#__PURE__*/React.createElement(Col, {\n      key: id++,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(MineBox, {\n      click: this.onClick,\n      isMine: box.isMine,\n      value: box.value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 23\n      }\n    }))))));\n  }\n\n  updateGameSettings() {} // to get the new game numbers from the user and set themto the state;\n\n\n  createBoxesTable() {\n    console.log(\"create Boxes State\");\n    var boxesTable = Array.from({\n      length: this.state.width\n    }, () => Array.from({\n      length: this.state.height\n    }, () => ({\n      value: 0,\n      isMine: false\n    }))); // var boxesTable = [];\n    // boxesTable.length = this.state.width;\n    // var column = [];\n    // column.length = this.state.height;\n    // //column.fill(new MineBox({click: this.onClick, value: 0, isMine:false}));\n    // column.fill(Object.create({value: 0, isMine:false}));\n    // boxesTable.fill(column);\n    //---------------------------------------------------------\n    // for (let w = 0; w < this.state.width; w++) \n    // {\n    //     let column = []\n    //     column.fill(new MineBox(), 0, height-1);\n    //     for (let h = 0; h < this.state.height; h++) \n    //     {\n    //         let id = w * this.state.width + h;\n    //         childern.push(new MineBox());\n    //     }          \n    //     this.boxesTable.push(column);\n\n    return boxesTable;\n  }\n\n  setMines() {\n    console.log(\"set Mines\");\n\n    for (let mineCount = 0; mineCount < this.state.mines; mineCount++) {\n      let x = Math.floor(Math.random() * (this.state.width - 1));\n      let y = Math.floor(Math.random() * (this.state.height - 1)); //if(!this.boxesTable[x][y].checkIsMine())\n\n      if (!this.boxesTable[x][y].isMine) {\n        //this.boxesTable[x][y].setMine()\n        this.boxesTable[x][y].isMine = true;\n        this.applyAround({\n          x,\n          y\n        }, this.increaseValue);\n      } else {\n        mineCount--;\n      }\n    }\n  }\n\n  applyAround(point, toApplyFunc) {\n    console.log(\"apply Around\");\n    let height = this.state.height;\n    let width = this.state.width;\n\n    function checkAndApply(point) {\n      // check and apply\n      console.log(\"check and apply\");\n\n      if (point.x >= 0 && point.y >= 0 && point.x < width && point.y < height) {\n        toApplyFunc(point);\n      }\n    }\n\n    let x = point.x;\n    let y = point.y; // left side          \n\n    checkAndApply({\n      x: x - 1,\n      y\n    }); // <-\n\n    checkAndApply({\n      x: x - 1,\n      y: y - 1\n    }); //<-^\n\n    checkAndApply({\n      x: x - 1,\n      y: y + 1\n    }); //<-v\n    // right side\n\n    checkAndApply({\n      x: x + 1,\n      y\n    }); // ->\n\n    checkAndApply({\n      x: x + 1,\n      y: y - 1\n    }); // ->^\n\n    checkAndApply({\n      x: x + 1,\n      y: y + 1\n    }); // -> v\n    // up and down\n\n    checkAndApply({\n      x,\n      y: y - 1\n    }); // ^\n\n    checkAndApply({\n      x,\n      y: y + 1\n    }); // V\n  }\n\n  increaseValue(point) {\n    console.log(\"increase Value\");\n    this.boxesTable[point.x][point.y].value++;\n  }\n\n  onClick(event, more) {\n    console.log(event);\n    console.log(more);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }\n    }, this.newGame());\n  }\n\n}\n\nclass MineBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isMine: false,\n      value: 0,\n      flagged: false\n    };\n    this.checkIsMine = this.checkIsMine.bind(this);\n    this.setMine = this.setMine.bind(this);\n    this.changeFlagState = this.changeFlagState.bind(this);\n    this.increaseValue = this.increaseValue.bind(this); // this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  checkIsMine() {\n    return this.state.isMine;\n  }\n\n  setMine() {\n    console.log(\"inner set Mine\");\n    this.setState({\n      isMine: true\n    });\n  }\n\n  changeFlagState() {\n    let nextFlagState = !this.state.flagged;\n    this.setState(prevState => ({\n      flagged: !prevState.flagged\n    }));\n    return nextFlagState;\n  }\n\n  increaseValue() {\n    this.setState(prevState => {\n      value: prevState.value++;\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"img\", {\n      src: logo,\n      className: \"Box-logo\",\n      alt: this.props.value,\n      onClick: this.props.click,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }\n    });\n  }\n\n}\n\nexport default GameBody;","map":{"version":3,"sources":["C:/hometaskwix/minesweeper/src/components/gameBody.js"],"names":["React","logo","Col","Row","Grid","GameBody","Component","constructor","props","state","height","width","mines","newGame","bind","updateGameSettings","createBoxesTable","setMines","applyAround","increaseValue","onClick","console","log","boxesTable","id","map","cols","w","box","h","isMine","value","Array","from","length","mineCount","x","Math","floor","random","y","point","toApplyFunc","checkAndApply","event","more","render","MineBox","flagged","checkIsMine","setMine","changeFlagState","setState","nextFlagState","prevState","click"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport logo from '../images/logo192.png';\r\nimport '../App.css';\r\nimport { Col, Row, Grid } from 'react-flexbox-grid'\r\n\r\nclass GameBody extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { height: 10, width: 10, mines: 10 };\r\n\r\n        this.newGame = this.newGame.bind(this);\r\n        this.updateGameSettings = this.updateGameSettings.bind(this);\r\n        this.createBoxesTable = this.createBoxesTable.bind(this);\r\n        this.setMines = this.setMines.bind(this);\r\n        this.applyAround = this.applyAround.bind(this);\r\n        this.increaseValue = this.increaseValue.bind(this);\r\n        this.onClick = this.onClick.bind(this);\r\n        //this.boxesTable = this.boxesTable.bind(this);\r\n    }\r\n\r\n    newGame() {\r\n        console.log(\"new Game\");\r\n        this.updateGameSettings();\r\n        this.boxesTable = this.createBoxesTable();\r\n        this.setMines();\r\n\r\n        var id = 0;\r\n        return (\r\n            <div className=\"Mine-grid\">\r\n              {this.boxesTable.map((cols, w) => (\r\n                <Row key={id++} className=\"Mine-row\">\r\n                  {cols.map((box, h) => (\r\n                    <Col key={id++}>\r\n                      <MineBox click={this.onClick} isMine={box.isMine} value={box.value}></MineBox>\r\n                    </Col>\r\n                  ))}\r\n                </Row>\r\n              ))}\r\n            </div>\r\n        )\r\n                    \r\n    }\r\n\r\n    updateGameSettings() {} // to get the new game numbers from the user and set themto the state;\r\n\r\n    createBoxesTable() {\r\n        console.log(\"create Boxes State\");\r\n\r\n        var boxesTable = Array.from({length: this.state.width}, () => Array.from({length: this.state.height}, () => ({value: 0, isMine: false})))\r\n        // var boxesTable = [];\r\n        // boxesTable.length = this.state.width;\r\n\r\n        // var column = [];\r\n        // column.length = this.state.height;\r\n        // //column.fill(new MineBox({click: this.onClick, value: 0, isMine:false}));\r\n        // column.fill(Object.create({value: 0, isMine:false}));\r\n        // boxesTable.fill(column);\r\n        //---------------------------------------------------------\r\n        // for (let w = 0; w < this.state.width; w++) \r\n        // {\r\n        //     let column = []\r\n\r\n        //     column.fill(new MineBox(), 0, height-1);\r\n\r\n        //     for (let h = 0; h < this.state.height; h++) \r\n        //     {\r\n        //         let id = w * this.state.width + h;\r\n        //         childern.push(new MineBox());\r\n        //     }          \r\n\r\n        //     this.boxesTable.push(column);\r\n\r\n        return boxesTable;\r\n    }\r\n\r\n    setMines() {\r\n        console.log(\"set Mines\");\r\n        for(let mineCount = 0; mineCount < this.state.mines; mineCount++)\r\n        {\r\n            let x = Math.floor(Math.random() * (this.state.width - 1));\r\n            let y = Math.floor(Math.random() * (this.state.height - 1));\r\n            \r\n            //if(!this.boxesTable[x][y].checkIsMine())\r\n            if(!this.boxesTable[x][y].isMine)            \r\n            {\r\n                //this.boxesTable[x][y].setMine()\r\n                this.boxesTable[x][y].isMine = true;\r\n                \r\n                this.applyAround({x,y},this.increaseValue)\r\n            }\r\n            else\r\n            {\r\n                mineCount--\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    applyAround(point,toApplyFunc)\r\n    {        \r\n        console.log(\"apply Around\");\r\n        \r\n        let height = this.state.height;\r\n        let width = this.state.width;\r\n        function checkAndApply(point){// check and apply\r\n            console.log(\"check and apply\");\r\n            \r\n            if(point.x >= 0 && point.y >= 0 && point.x < width && point.y < height) \r\n            {\r\n                toApplyFunc(point)\r\n            }\r\n        }\r\n\r\n        let x = point.x;\r\n        let y = point.y;\r\n\r\n        // left side          \r\n        checkAndApply({x: x - 1, y});// <-\r\n        checkAndApply({x: x - 1, y: y - 1});//<-^\r\n        checkAndApply({x: x - 1, y: y + 1})//<-v\r\n          \r\n        // right side\r\n        checkAndApply({x: x + 1, y});// ->\r\n        checkAndApply({x: x + 1, y: y -1});// ->^\r\n        checkAndApply({x: x + 1, y: y + 1})// -> v\r\n          \r\n        // up and down\r\n        checkAndApply({x, y: y - 1});// ^\r\n        checkAndApply({x, y: y + 1})// V\r\n    }\r\n\r\n    increaseValue (point) {\r\n        console.log(\"increase Value\");\r\n        this.boxesTable[point.x][point.y].value++;\r\n    }\r\n\r\n    onClick (event, more) {\r\n        console.log(event);\r\n        console.log(more);\r\n\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n        <div>\r\n            {this.newGame()}\r\n        </div>\r\n        );\r\n    };\r\n}\r\n\r\n\r\nclass MineBox extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { isMine: false, value: 0, flagged: false };\r\n        this.checkIsMine = this.checkIsMine.bind(this);\r\n        this.setMine = this.setMine.bind(this);\r\n        this.changeFlagState = this.changeFlagState.bind(this);\r\n        this.increaseValue = this.increaseValue.bind(this);\r\n        // this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    checkIsMine() {\r\n        return this.state.isMine;\r\n    }\r\n\r\n    setMine() {\r\n        console.log(\"inner set Mine\");\r\n        this.setState({isMine:true});\r\n    }\r\n\r\n    changeFlagState() {\r\n        let nextFlagState = !this.state.flagged;\r\n        this.setState((prevState)=> ({flagged: !prevState.flagged}));\r\n        return nextFlagState;\r\n    }\r\n\r\n    increaseValue() {        \r\n        this.setState((prevState)=> {value: prevState.value++});        \r\n    }\r\n\r\n    render() {\r\n      return (\r\n        \r\n          <img src={logo} className=\"Box-logo\" alt={this.props.value} onClick={this.props.click}/>\r\n        \r\n      );\r\n    }\r\n}\r\nexport default GameBody;\r\n"]},"metadata":{},"sourceType":"module"}